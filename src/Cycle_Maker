import maya.cmds as cmds
import re

class CycleMakerUI:
    """
    Maya Animation Cycle Maker Tool
    
    A comprehensive tool for creating seamless animation cycles with automatic left/right 
    mirroring, X-axis inversion detection, spine processing, and infinity management.
    
    MAIN FEATURES:
    - Automatic rig prefix detection
    - Left/Right control pairing and mirroring  
    - Intelligent X-axis inversion detection for different rig conventions
    - Cycle infinity application with multiple fallback strategies
    - Spine/centerline inversion for rotateY/Z channels
    - Time and value offset support for layered animation
    
    FILE ORGANIZATION:
    ==================
    SECTION 1: INITIALIZATION & SETUP (lines ~30-150)
        - __init__() - Initialize variables and UI
        - setup_ui() - Create the main interface
        
    SECTION 2: CONTROL MANAGEMENT (lines ~150-250) 
        - add_selected_controls() - Add controls to left/right lists
        - remove_selected_controls() - Remove selected controls
        - load_biped_defaults() / load_quad_defaults() - Preset control lists
        
    SECTION 3: UTILITY FUNCTIONS (lines ~250-350)
        - String manipulation (is_left, is_right, get_other_side)
        - Rig prefix extraction
        - Animation curve helpers
        
    SECTION 4: X-AXIS INVERSION DETECTION (lines ~350-550)
        - detect_x_inversion_needed() - Main detection logic
        - _analyze_translate_x_patterns() - TranslateX movement analysis  
        - _analyze_rotation_patterns() - Rotation fallback analysis
        - analyze_all_control_pairs() - Batch analysis
        
    SECTION 5: INFINITY MANAGEMENT (lines ~550-750)
        - _apply_cycle_infinity_mel() - MEL-based infinity application
        - _apply_cycle_infinity_advanced() - Multi-strategy fallback system
        - apply_cycle_infinity_for_selection() - Manual infinity application
        
    SECTION 6: ANIMATION CORE FUNCTIONS (lines ~750-950)
        - copy_keys() - Main key copying with auto-inversion
        - get_key_options() - Paste options configuration
        - _keyed_attributes() - Find animated attributes
        
    SECTION 7: COPY OPERATIONS (lines ~950-1050)
        - copy_left_to_right() / copy_right_to_left() - Directional copying
        
    SECTION 8: SPINE/CENTERLINE PROCESSING (lines ~1050-1150)
        - invert_spine_channels() - Manual spine inversion
        - _should_invert_for_spine() - Spine keyword matching
        - _rebuild_second_half_antiphase() - Antiphase animation creation
        
    SECTION 9: UI CALLBACKS & HELPERS (lines ~1150-end)
        - Event handlers for buttons and checkboxes
        - Analysis result displays

    """
    def __init__(self):
        self.window = "cycleMakerWin"
        self.left_controls = []
        self.right_controls = []
        # Per-control inversion settings: [{tx: bool, ty: bool, tz: bool, rx: bool, ry: bool, rz: bool}, ...]
        self.control_inversions = []
        # Per-control offset settings (in frames): [offset_value, ...]
        self.control_offsets = []

        self.left_list_field = None  # Keep for backward compatibility
        self.right_list_field = None  # Keep for backward compatibility
        self.control_pairs_scroll = None
        self.prefix_field = None
        # Spine/centerline inversion UI handles and defaults
        self.spine_controls_list = None
        self.wing_controls_list = None  # Keep for backward compatibility
        self.wing_pairs_scroll = None
        # Wing control pairs data (similar to main control pairs)
        self.wing_left_controls = []
        self.wing_right_controls = []
        self.wing_control_inversions = []
        self.invert_y_chk = None
        self.invert_z_chk = None
        self.spine_keywords_default = [
            'spine', 'chest', 'torso', 'back', 'hip', 'pelvis', 'waist', 'abdomen',
            'cog', 'root', 'body', 'head', 'tail'
        ]
        self.spine_invert_y_default = True
        self.spine_invert_z_default = True
        # Auto-detection system for X-axis inversion
        self.auto_detect_x_inversion = True
        
        # Copy with Offset tab data structures
        self.copy_offset_objects = []  # List of selected objects in order
        self.copy_offset_time_offsets = []  # Time offset for each object
        self.copy_offset_value_offsets = []  # Value offset for each object  
        self.copy_offset_channel_settings = []  # Channel settings for each object
        self.copy_offset_scroll = None  # Scroll layout for object list
        
        # Legacy fields for backward compatibility (if needed)
        self.time_offset_copy_field = None
        self.value_offset_copy_field = None
        
        self.setup_ui()

    # =========================================================================
    # SECTION 1: INITIALIZATION & UI SETUP
    # =========================================================================

    def setup_ui(self):
        if cmds.window(self.window, exists=True):
            cmds.deleteUI(self.window)
        self.window = cmds.window(self.window, title="Cycle Maker Tool", widthHeight=(520, 450))
        
        # Create main tab layout
        main_tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
        
        # TAB 1: Cycle Maker (original functionality)
        tab1 = cmds.columnLayout(adjustableColumn=True, parent=main_tabs)
        self.setup_cycle_maker_tab()
        
        # TAB 2: Copy with Offset
        tab2 = cmds.columnLayout(adjustableColumn=True, parent=main_tabs)
        self.setup_copy_offset_tab()
        
        # Set tab labels
        cmds.tabLayout(main_tabs, edit=True, tabLabel=((tab1, 'Cycle Maker'), (tab2, 'Copy with Offset')))
        
        cmds.showWindow(self.window)
    
    def setup_cycle_maker_tab(self):
        """Setup the original Cycle Maker functionality tab."""
        # Hidden prefix field (functionality preserved, UI hidden)
        self.prefix_field = cmds.textField(text="tigerA_rigMain_01_:", visible=False)
        
        # Advanced control pair management with per-pair inversion settings
        cmds.frameLayout(label="Left/Right Control Pairs with Inversion Settings", collapsable=False, 
                        marginHeight=8, marginWidth=8, borderVisible=True,
                        backgroundColor=(0.45, 0.42, 0.38))  # Muted orange for main sections
        cmds.columnLayout(adjustableColumn=True, rowSpacing=3)
        
        # Headers row - use nested layouts to avoid columnWidth9 limitation
        cmds.rowLayout(numberOfColumns=2, columnWidth2=(320, 140), height=25)
        # First part: Controls with swap all button - matching individual row layout
        cmds.rowLayout(numberOfColumns=5, columnWidth5=(120, 15, 50, 15, 120))
        cmds.text(label="Left Control", align="center", font="boldLabelFont", height=22)
        cmds.text(label="", width=15)  # Spacer
        cmds.button(label="â‡„", width=50, height=22,
                   backgroundColor=(0.6, 0.4, 0.6),
                   annotation="Swap all left/right control pairs",
                   command=self._swap_all_control_pairs)
        cmds.text(label="", width=15)  # Spacer
        cmds.text(label="Right Control", align="center", font="boldLabelFont", height=22)
        cmds.setParent('..')  # controls header
        # Second part: Offset and checkboxes
        cmds.rowLayout(numberOfColumns=6, columnWidth6=(60, 20, 20, 20, 20, 60))
        cmds.text(label="Offset", align="center", font="boldLabelFont", height=22)
        cmds.text(label="TX", align="center", font="smallPlainLabelFont", height=22)
        cmds.text(label="TY", align="center", font="smallPlainLabelFont", height=22)
        cmds.text(label="TZ", align="center", font="smallPlainLabelFont", height=22)
        cmds.text(label="RX", align="center", font="smallPlainLabelFont", height=22)
        cmds.text(label="RY    RZ", align="center", font="smallPlainLabelFont", height=22)
        cmds.setParent('..')  # offset/checkboxes header
        cmds.setParent('..')  # main headers row
        
        # Bulk editing controls positioned below headers - nested structure
        cmds.rowLayout(numberOfColumns=2, columnWidth2=(320, 140), height=22)
        # First part: Empty space above controls - matching individual row layout
        cmds.rowLayout(numberOfColumns=5, columnWidth5=(120, 15, 50, 15, 120))
        cmds.text(label="", width=120)  # Empty space above left control
        cmds.text(label="", width=15)   # Spacer
        cmds.text(label="", width=50)   # Empty space above swap button
        cmds.text(label="", width=15)   # Spacer
        cmds.text(label="", width=120)  # Empty space above right control
        cmds.setParent('..')  # controls spacer
        # Second part: Offset and bulk checkboxes
        cmds.rowLayout(numberOfColumns=6, columnWidth6=(60, 20, 20, 20, 20, 60))
        cmds.intField(value=20, width=55, height=20, annotation="Set this offset for all pairs",
                     changeCommand=self._set_all_offsets)
        self.bulk_tx_chk = cmds.checkBox(label='', value=False, height=20,
                                        changeCommand=lambda x: self._set_all_inversions('tx', x))
        self.bulk_ty_chk = cmds.checkBox(label='', value=False, height=20,
                                        changeCommand=lambda x: self._set_all_inversions('ty', x))
        self.bulk_tz_chk = cmds.checkBox(label='', value=False, height=20,
                                        changeCommand=lambda x: self._set_all_inversions('tz', x))
        self.bulk_rx_chk = cmds.checkBox(label='', value=False, height=20,
                                        changeCommand=lambda x: self._set_all_inversions('rx', x))
        cmds.rowLayout(numberOfColumns=3, columnWidth3=(20, 20, 20))
        self.bulk_ry_chk = cmds.checkBox(label='', value=False, height=20,
                                        changeCommand=lambda x: self._set_all_inversions('ry', x))
        self.bulk_rz_chk = cmds.checkBox(label='', value=False, height=20,
                                        changeCommand=lambda x: self._set_all_inversions('rz', x))
        cmds.button(label="âœ•", width=20, height=20,
                   command=self.clear_all_control_pairs,
                   backgroundColor=(0.7, 0.5, 0.5),
                   annotation="Clear all control pairs")
        cmds.setParent('..')  # RY RZ X layout
        cmds.setParent('..')  # offset/checkboxes layout
        cmds.setParent('..')  # bulk controls row
        
        # Scrollable area for control pairs with improved styling
        self.control_pairs_scroll = cmds.scrollLayout(height=160, childResizable=True, 
                                                     backgroundColor=(0.85, 0.85, 0.85))
        cmds.columnLayout(adjustableColumn=True, rowSpacing=3)
        # Control pairs will be added here dynamically
        cmds.setParent('..')  # columnLayout
        cmds.setParent('..')  # scrollLayout
        
        cmds.setParent('..')  # columnLayout
        cmds.setParent('..')  # frameLayout
        
        cmds.separator(height=12, style="in")
        # Add button for Left/Right control pairs
        cmds.button(label="Add Selected", command=self.add_selected_controls, height=28,
                   backgroundColor=(0.42, 0.48, 0.42))  # Muted green for add actions
        cmds.separator(height=12, style="in")
        
        # Copy button with improved layout
        cmds.button(label="Copy Across", command=self.copy_with_direction, height=28,
                   backgroundColor=(0.42, 0.48, 0.42))  # Muted green for primary action
        
        # Auto-detection options
        cmds.columnLayout(adjustableColumn=True, rowSpacing=3)
        self.auto_detect_checkbox = cmds.checkBox(label="Auto-Detect Axis Conventions", value=True,
                                                 annotation="Automatically analyze rig during copy operations")
        cmds.rowLayout(numberOfColumns=2, columnWidth2=(200, 200), adjustableColumn=1,
                      columnAttach=[(1, 'both', 2), (2, 'both', 2)])
        cmds.button(label="Test Detection", command=self.test_axis_detection, height=22,
                   backgroundColor=(0.45, 0.45, 0.45),
                   annotation="Preview what auto-detection would find")
        cmds.button(label="Apply Detection", command=self.apply_axis_detection, height=22,
                   backgroundColor=(0.42, 0.48, 0.42),
                   annotation="Apply auto-detection results to inversion checkboxes")
        cmds.setParent('..')  # rowLayout
        cmds.setParent('..')  # columnLayout
        
        cmds.separator(height=15, style="in")
        
        # Spine/centerline inversion options
        cmds.frameLayout(label="Spine/Centerline Inversion", collapsable=True, collapse=False, 
                        marginHeight=8, marginWidth=8, borderVisible=True,
                        backgroundColor=(0.46, 0.38, 0.46))  # Muted purple for spine controls
        cmds.columnLayout(adjustableColumn=True, rowSpacing=5)
        cmds.text(label="Spine Controls (will invert rotateY/rotateZ):", font="boldLabelFont")
        
        # Spine controls list with Add/Remove buttons - improved layout
        cmds.rowLayout(numberOfColumns=2, columnWidth2=(260, 150), 
                      columnAttach=[(1, 'both', 2), (2, 'both', 2)])
        self.spine_controls_list = cmds.textScrollList(numberOfRows=4, allowMultiSelection=True, width=250,
                                                      backgroundColor=(0.8, 0.8, 0.8))  # Softer gray for lists
        
        cmds.columnLayout(adjustableColumn=True, rowSpacing=3)
        cmds.button(label="Add Selected", command=self.add_selected_to_spine_list, width=140, height=26,
                   backgroundColor=(0.42, 0.48, 0.42))  # Muted green for add
        cmds.button(label="Remove Selected", command=self.remove_selected_from_spine_list, width=140, height=26,
                   backgroundColor=(0.52, 0.42, 0.42))  # Muted red for remove
        cmds.button(label="Clear All", command=self.clear_spine_list, width=140, height=26,
                   backgroundColor=(0.48, 0.48, 0.48))  # Softer gray for clear
        cmds.setParent('..')  # columnLayout
        cmds.setParent('..')  # rowLayout
        
        cmds.rowLayout(numberOfColumns=4, columnWidth4=(140, 60, 140, 60), adjustableColumn=2,
                      columnAttach=[(1, 'left', 5), (3, 'left', 5)])
        cmds.text(label="Invert rotateY:", font="plainLabelFont")
        self.invert_y_chk = cmds.checkBox(label='', value=self.spine_invert_y_default)
        cmds.text(label="Invert rotateZ:", font="plainLabelFont")
        self.invert_z_chk = cmds.checkBox(label='', value=self.spine_invert_z_default)
        cmds.setParent('..')  # rowLayout
        # Action button for manual spine inversion
        cmds.separator(height=8, style="in")
        cmds.button(label="Invert Spine Channels on Selection", command=self.invert_spine_channels, height=28,
                   backgroundColor=(0.46, 0.38, 0.46))  # Muted purple to match spine theme
        cmds.setParent('..')  # columnLayout
        cmds.setParent('..')  # frameLayout



        cmds.separator(height=15, style="in")
        cmds.rowLayout(numberOfColumns=2, columnWidth2=(200, 200), adjustableColumn=1,
                      columnAttach=[(1, 'both', 2), (2, 'both', 2)])
        cmds.button(label="Load Default Biped Controls", command=self.load_biped_defaults, height=30,
                   backgroundColor=(0.38, 0.45, 0.52))  # Muted blue for presets
        cmds.button(label="Load Default Quadruped Controls", command=self.load_quad_defaults, height=30,
                   backgroundColor=(0.38, 0.45, 0.52))  # Muted blue for presets
        cmds.setParent('..')
    
    def _refresh_control_pairs_ui(self):
        """Refresh the dynamic control pairs UI."""
        # Clear existing UI elements
        children = cmds.scrollLayout(self.control_pairs_scroll, query=True, childArray=True) or []
        for child in children:
            cmds.deleteUI(child)
        
        # Set parent to scroll layout's column
        cmds.setParent(self.control_pairs_scroll)
        cmds.columnLayout(adjustableColumn=True, rowSpacing=2)
        
        # Create a row for each control pair
        for i, (left_ctrl, right_ctrl) in enumerate(zip(self.left_controls, self.right_controls)):
            # Ensure we have inversion data for this pair
            while len(self.control_inversions) <= i:
                # Default inversion settings - all unchecked by default
                self.control_inversions.append({
                    'tx': False, 'ty': False, 'tz': False,
                    'rx': False, 'ry': False, 'rz': False
                })
            
            # Ensure we have offset data for this pair
            while len(self.control_offsets) <= i:
                # Default offset: half the cycle length (20 frames for 40-frame cycle)
                cycle_length = 40  # Could get this from playback range later
                self.control_offsets.append(cycle_length // 2)
            
            inversion = self.control_inversions[i]
            offset = self.control_offsets[i]
            self._create_control_pair_row(i, left_ctrl, right_ctrl, offset, inversion)
        
        cmds.setParent('..')  # columnLayout
    
    def _create_control_pair_row(self, index, left_ctrl, right_ctrl, offset, inversion):
        """Create a single control pair row with offset field and inversion checkboxes."""
        cmds.rowLayout(numberOfColumns=2, columnWidth2=(320, 120))
        
        # Controls section with proper spacing and margins
        cmds.rowLayout(numberOfColumns=5, columnWidth5=(120, 15, 50, 15, 120))
        # Left control (read-only text)
        cmds.text(label=left_ctrl, align="center")
        cmds.text(label="", width=15)  # Spacer
        
        # Direction swap button (shows bidirectional swap and allows swapping)
        cmds.button(label="â‡„", width=50, height=20,
                   backgroundColor=(0.6, 0.4, 0.6),
                   annotation="Click to swap left/right controls",
                   command=lambda x, idx=index: self._swap_control_pair(idx))
        
        cmds.text(label="", width=15)  # Spacer
        # Right control (read-only text)  
        cmds.text(label=right_ctrl, align="center")
        cmds.setParent('..')  # controls sub-layout
        
        # Offset and inversion checkboxes using nested structure
        cmds.rowLayout(numberOfColumns=6, columnWidth6=(60, 20, 20, 20, 20, 60))
        offset_field = cmds.intField(value=offset, width=55, height=20,
                                   changeCommand=lambda x, idx=index: self._update_offset(idx, x))
        tx_cb = cmds.checkBox(label='', value=inversion['tx'], height=20,
                              changeCommand=lambda x, idx=index, axis='tx': self._update_inversion(idx, axis, x))
        ty_cb = cmds.checkBox(label='', value=inversion['ty'], height=20,
                              changeCommand=lambda x, idx=index, axis='ty': self._update_inversion(idx, axis, x))
        tz_cb = cmds.checkBox(label='', value=inversion['tz'], height=20,
                              changeCommand=lambda x, idx=index, axis='tz': self._update_inversion(idx, axis, x))
        rx_cb = cmds.checkBox(label='', value=inversion['rx'], height=20,
                              changeCommand=lambda x, idx=index, axis='rx': self._update_inversion(idx, axis, x))
        # RY, RZ checkbox and Remove button in combined column
        cmds.rowLayout(numberOfColumns=3, columnWidth3=(20, 20, 20))
        ry_cb = cmds.checkBox(label='', value=inversion['ry'], height=20,
                              changeCommand=lambda x, idx=index, axis='ry': self._update_inversion(idx, axis, x))
        rz_cb = cmds.checkBox(label='', value=inversion['rz'], height=20,
                              changeCommand=lambda x, idx=index, axis='rz': self._update_inversion(idx, axis, x))
        cmds.button(label="âœ•", width=20, height=20,
                    command=lambda x, idx=index: self._remove_control_pair(idx),
                    backgroundColor=(0.7, 0.5, 0.5))  # Red for remove actions
        cmds.setParent('..')  # RY RZ X inner rowLayout  
        cmds.setParent('..')  # offset and checkboxes row
        cmds.setParent('..')  # main row
    
    def _update_inversion(self, index, axis, value):
        """Update inversion setting for a specific control pair and axis."""
        if index < len(self.control_inversions):
            self.control_inversions[index][axis] = value

    
    def _update_offset(self, index, value):
        """Update offset setting for a specific control pair."""
        if index < len(self.control_offsets):
            self.control_offsets[index] = value

    
    def _swap_control_pair(self, index):
        """Swap the left and right controls for a control pair"""
        if 0 <= index < len(self.left_controls) and 0 <= index < len(self.right_controls):
            # Swap the controls in the data structures
            self.left_controls[index], self.right_controls[index] = self.right_controls[index], self.left_controls[index]
            
            # Refresh the UI to show the swapped controls
            self._refresh_control_pairs_ui()
            
            print(f"Swapped controls: '{self.right_controls[index]}' <-> '{self.left_controls[index]}'")
    
    def _swap_all_control_pairs(self, *_):
        """Swap all left and right control pairs"""
        if len(self.left_controls) == len(self.right_controls):
            # Swap all pairs
            for i in range(len(self.left_controls)):
                self.left_controls[i], self.right_controls[i] = self.right_controls[i], self.left_controls[i]
            
            # Refresh the UI to show all swapped controls
            self._refresh_control_pairs_ui()
            
            print(f"Swapped all {len(self.left_controls)} control pairs")
        else:
            cmds.warning("Cannot swap all pairs - left and right lists have different lengths")
    
    def _remove_control_pair(self, index):
        """Remove a control pair and refresh the UI."""
        if 0 <= index < len(self.left_controls):
            left_ctrl = self.left_controls.pop(index)
            right_ctrl = self.right_controls.pop(index)
            if index < len(self.control_inversions):
                self.control_inversions.pop(index)
            if index < len(self.control_offsets):
                self.control_offsets.pop(index)

            self._refresh_control_pairs_ui()
    
    def setup_copy_offset_tab(self):
        """Setup the Copy with Offset functionality tab with per-object settings."""
        cmds.text(label="Copy with Time and Value Offset", font="boldLabelFont")
        cmds.separator(height=10)
        
        # Object list with per-object offset and channel settings
        cmds.frameLayout(label="Objects with Individual Offset Settings", collapsable=False, 
                        marginHeight=8, marginWidth=8, borderVisible=True,
                        backgroundColor=(0.42, 0.45, 0.48))  # Blue-gray theme
        cmds.columnLayout(adjustableColumn=True, rowSpacing=3)
        
        # Headers with improved styling using nested layouts
        cmds.rowLayout(numberOfColumns=4, columnWidth4=(120, 60, 60, 240), height=25)
        cmds.text(label="Object", align="center", font="boldLabelFont", height=22,
                 backgroundColor=(0.4, 0.45, 0.48))
        cmds.text(label="Time", align="center", font="boldLabelFont", height=22,
                 backgroundColor=(0.45, 0.4, 0.45))
        cmds.text(label="Value", align="center", font="boldLabelFont", height=22,
                 backgroundColor=(0.45, 0.4, 0.45))
        # Channel headers in nested layout
        cmds.rowLayout(numberOfColumns=6, columnWidth6=(35, 35, 35, 35, 35, 70))
        cmds.text(label="TX", align="center", font="smallPlainLabelFont", height=22,
                 backgroundColor=(0.4, 0.4, 0.4))
        cmds.text(label="TY", align="center", font="smallPlainLabelFont", height=22,
                 backgroundColor=(0.4, 0.4, 0.4))
        cmds.text(label="TZ", align="center", font="smallPlainLabelFont", height=22,
                 backgroundColor=(0.4, 0.4, 0.4))
        cmds.text(label="RX", align="center", font="smallPlainLabelFont", height=22,
                 backgroundColor=(0.4, 0.4, 0.4))
        cmds.text(label="RY", align="center", font="smallPlainLabelFont", height=22,
                 backgroundColor=(0.4, 0.4, 0.4))
        cmds.text(label="RZ", align="center", font="smallPlainLabelFont", height=22,
                 backgroundColor=(0.4, 0.4, 0.4))
        cmds.setParent('..')  # channel headers layout
        cmds.setParent('..')  # main header layout
        
        # Bulk editing controls positioned below headers
        cmds.rowLayout(numberOfColumns=4, columnWidth4=(120, 60, 60, 240), height=22)
        cmds.text(label="", width=120)  # Empty space above Object
        cmds.intField(value=10, width=55, annotation="Set this time offset for all objects",
                     changeCommand=self._set_all_copy_time_offsets)
        cmds.floatField(value=0.0, width=55, precision=2, annotation="Set this value offset for all objects",
                       changeCommand=self._set_all_copy_value_offsets)
        # Bulk checkboxes for channels
        cmds.rowLayout(numberOfColumns=6, columnWidth6=(35, 35, 35, 35, 35, 70))
        self.copy_bulk_tx_chk = cmds.checkBox(label='', value=False,
                                             changeCommand=lambda x: self._set_all_copy_channels('tx', x))
        self.copy_bulk_ty_chk = cmds.checkBox(label='', value=False,
                                             changeCommand=lambda x: self._set_all_copy_channels('ty', x))
        self.copy_bulk_tz_chk = cmds.checkBox(label='', value=False,
                                             changeCommand=lambda x: self._set_all_copy_channels('tz', x))
        self.copy_bulk_rx_chk = cmds.checkBox(label='', value=False,
                                             changeCommand=lambda x: self._set_all_copy_channels('rx', x))
        self.copy_bulk_ry_chk = cmds.checkBox(label='', value=False,
                                             changeCommand=lambda x: self._set_all_copy_channels('ry', x))
        cmds.rowLayout(numberOfColumns=2, columnWidth2=(35, 35))
        self.copy_bulk_rz_chk = cmds.checkBox(label='', value=False,
                                             changeCommand=lambda x: self._set_all_copy_channels('rz', x))
        cmds.button(label="X", width=30, height=18,
                   command=self.clear_all_copy_objects,
                   backgroundColor=(0.7, 0.5, 0.5),
                   annotation="Clear all objects")
        cmds.setParent('..')  # inner rowLayout
        cmds.setParent('..')  # bulk checkboxes layout
        cmds.setParent('..')  # bulk controls layout
        
        # Scrollable area for object list
        self.copy_offset_scroll = cmds.scrollLayout(height=160, childResizable=True, 
                                                   backgroundColor=(0.85, 0.85, 0.85))
        cmds.columnLayout(adjustableColumn=True, rowSpacing=3)
        # Object rows will be added here dynamically
        cmds.setParent('..')  # columnLayout
        cmds.setParent('..')  # scrollLayout
        
        cmds.setParent('..')  # columnLayout
        cmds.setParent('..')  # frameLayout
        
        cmds.separator(height=12, style="in")
        # Add button for object management  
        cmds.button(label="Add Selected Objects", command=self.add_selected_copy_objects, height=28,
                   backgroundColor=(0.42, 0.48, 0.42))  # Muted green for add actions
        
        cmds.separator(height=15, style="in")
        
        # Copy button with improved styling
        cmds.button(label="Copy with Offset", command=self.copy_with_offset, height=35, 
                   backgroundColor=(0.42, 0.48, 0.42))  # Consistent muted green

    # =========================================================================
    # SECTION 2: CONTROL MANAGEMENT
    # =========================================================================

    def add_selected_controls(self, *_):
        sel = cmds.ls(selection=True)
        if not sel:
            cmds.warning("No controls selected.")
            return
            
        # Auto-detect and update rig prefix from first selected control (hidden from UI)
        first_ctrl = sel[0]
        detected_prefix = self.extract_rig_prefix(first_ctrl)
        current_prefix = cmds.textField(self.prefix_field, query=True, text=True)
        
        # Update prefix if it's different from current or if current is default
        if detected_prefix != current_prefix or current_prefix == "tigerA_rigMain_01_:":
            cmds.textField(self.prefix_field, edit=True, text=detected_prefix)
        
        for ctrl in sel:
            ctrl_short = ctrl.split(':')[-1] if ':' in ctrl else ctrl
            if self.is_left(ctrl_short):
                right_ctrl = self.get_other_side(ctrl_short, left_to_right=True)
                if ctrl_short not in self.left_controls and right_ctrl and right_ctrl not in self.right_controls:
                    self.left_controls.append(ctrl_short)
                    self.right_controls.append(right_ctrl)

            elif self.is_right(ctrl_short):
                left_ctrl = self.get_other_side(ctrl_short, left_to_right=False)
                if ctrl_short not in self.right_controls and left_ctrl and left_ctrl not in self.left_controls:
                    self.right_controls.append(ctrl_short)
                    self.left_controls.append(left_ctrl)

            else:
                cmds.warning(f"Control name does not match left/right pattern: {ctrl_short}")
        
        # Refresh the UI to show new control pairs
        self._refresh_control_pairs_ui()

    def remove_selected_controls(self, *_):
        # Note: Individual remove buttons are now handled by _remove_control_pair method
        # This method is kept for backward compatibility but currently does nothing
        # since removal is handled per-row in the new UI
        cmds.warning("Use the individual 'Remove' buttons next to each control pair.")

    # =========================================================================
    # SECTION 3: UTILITY FUNCTIONS & ANIMATION HELPERS
    # =========================================================================

    # ---------------------
    # String manipulation utilities  
    # ---------------------
    def is_left(self, name):
        """Check if control name indicates left side (L_ or _L patterns)."""
        return bool(re.search(r"(^|:|_)L(_|$)", name))

    def is_right(self, name):
        """Check if control name indicates right side (R_ or _R patterns)."""
        return bool(re.search(r"(^|:|_)R(_|$)", name))

    def get_other_side(self, name, left_to_right=True):
        """Convert left control name to right (or vice versa)."""
        if left_to_right:
            # Handle both L_ and _L patterns
            name = re.sub(r"(^|:|_)L(_|$)", r"\1R\2", name)
        else:
            # Handle both R_ and _R patterns
            name = re.sub(r"(^|:|_)R(_|$)", r"\1L\2", name)
        return name

    def extract_rig_prefix(self, control_name):
        """Extract the rig prefix/namespace from a control name.
        Examples: 
        - 'the_tyrant_rig:IKLeg_R' -> 'the_tyrant_rig:'
        - 'tigerA_rigMain_01_:L_arm_CTL' -> 'tigerA_rigMain_01_:'
        - 'IKLeg_R' -> ''
        """
        if ':' in control_name:
            return control_name.split(':', 1)[0] + ':'
        return ''

    # ---------------------
    # Animation curve utilities
    # ---------------------
    def _anim_curve_for_attr(self, attr_plug):
        """Return the first animCurve node connected to the given attribute plug.
        attr_plug is like 'node.attr'. Returns None if not found.
        """
        # Prefer robust query that traverses through utility nodes
        try:
            curves = cmds.keyframe(attr_plug, query=True, name=True) or []
            if curves:
                return curves[0]
        except Exception:
            pass

        # Fallback: direct connections
        conns = cmds.listConnections(attr_plug, s=True, d=False) or []
        for n in conns:
            try:
                nt = cmds.nodeType(n)
            except Exception:
                continue
            if isinstance(nt, str) and nt.startswith('animCurve'):
                return n
        return None

    def _apply_cycle_infinity_mel(self, curves):
        """Apply cycle infinity to animation curves using MEL commands.
        This is more reliable than the Python cmds.setInfinity approach.
        """
        if not curves:
            return

        # Normalize to list
        if isinstance(curves, str):
            curves = [curves]

        for curve in curves:
            if not curve or not cmds.objExists(curve):
                continue
            # Some animCurve types use preInfinity/postInfinity enum (int). 2 == cycle
            for attr_name, label in (("preInfinity", "pre"), ("postInfinity", "post")):
                try:
                    locked = cmds.getAttr(f"{curve}.{attr_name}", lock=True)
                except Exception:
                    locked = False
                if locked:
                    try:
                        cmds.setAttr(f"{curve}.{attr_name}", lock=False)
                    except Exception as e:
                        continue
                try:
                    before = cmds.getAttr(f"{curve}.{attr_name}")
                except Exception:
                    before = "?"
                # Direct setAttr (0=constant,1=linear,2=cycle,3=cycleRelative,4=oscillate)
                try:
                    cmds.setAttr(f"{curve}.{attr_name}", 3)
                except Exception as e:
                    # Fallback: attempt MEL targeted at curve
                    try:
                        import maya.mel as mel
                        mel.eval(f"select -r {curve};")
                        if label == 'pre':
                            mel.eval("setInfinity -pri cycle;")
                        else:
                            mel.eval("setInfinity -poi cycle;")
                    except Exception as me:
                        pass
                try:
                    after = cmds.getAttr(f"{curve}.{attr_name}")
                except Exception:
                    after = "?"
                # Relock if it was locked originally
                if locked:
                    try:
                        cmds.setAttr(f"{curve}.{attr_name}", lock=True)
                    except Exception:
                        pass

    # =========================================================================
    # SECTION 5: INFINITY MANAGEMENT
    # =========================================================================

    def _apply_cycle_infinity_advanced(self, curves, verbose=True):
        """Attempt to set pre/post infinity to cycle with multiple strategies and diagnostics.
        Strategies per curve:
          1. Direct setInfinity command with full parameter specification
          2. Direct setAttr (int 2)
          3. cmds.setInfinity(preInfinite='cycle', postInfinite='cycle')
          4. OpenMaya API plug set (setInt)
        Batch strategies (all curves):
          5. MEL batch: select all curves once, set both pri & poi simultaneously
        Diagnostics:
          - keyframe count & times
          - reference status & node lock state
          - original and final values
          - single-key warning (cycle visually meaningless with <2 keys)
        Returns (updated, failed) lists.
        """
        if not curves:
            return [], []
        # Normalize
        if isinstance(curves, str):
            curves = [curves]
        updated = []
        pending = []
        
        # Pre-pass collect info
        for c in curves:
            if not cmds.objExists(c):
                if verbose:
                    print(f"INFINITY_ADV: Curve missing {c}")
                continue
            
            # Try direct setInfinity command first with all parameters
            try:
                # This applies to all keyframe tangents on the curve
                cmds.setInfinity(c, preInfinite="cycle", postInfinite="cycle", 
                                controlPoints=True, shape=True, hierarchy="none")
                
                # Verify it worked
                pre_val = cmds.getAttr(c+'.preInfinity')
                post_val = cmds.getAttr(c+'.postInfinity')
                if pre_val == 3 and post_val == 3:
                    if verbose:
                        print(f"INFINITY_ADV: Direct setInfinity with params success {c}")
                    updated.append(c)
                    continue
            except Exception as e:
                if verbose:
                    print(f"INFINITY_ADV: Direct setInfinity with params failed {c}: {e}")
            
            try:
                kt = cmds.keyframe(c, query=True, timeChange=True) or []
            except Exception:
                kt = []
            kcount = len(kt)
            try:
                ref = cmds.referenceQuery(c, isNodeReferenced=True)
            except Exception:
                ref = False
            try:
                locked_node = cmds.lockNode(c, query=True, lock=True) or [False]
                locked_node = any(locked_node)
            except Exception:
                locked_node = False
            try:
                pre0 = cmds.getAttr(c+'.preInfinity')
                post0 = cmds.getAttr(c+'.postInfinity')
            except Exception:
                pre0 = post0 = '??'
            if verbose:
                rng = (min(kt), max(kt)) if kcount else (None, None)
                print(f"INFINITY_ADV: {c} type={cmds.nodeType(c)} keys={kcount} range={rng} ref={ref} lockedNode={locked_node} pre={pre0} post={post0}")
            # Try direct setAttr command first
            success_direct = False
            for attr in ('preInfinity','postInfinity'):
                try:
                    cmds.setAttr(f'{c}.{attr}', 3)
                except Exception as e:
                    if verbose:
                        print(f"INFINITY_ADV: setAttr failed {c}.{attr}: {e}")
            try:
                preA = cmds.getAttr(c+'.preInfinity')
                postA = cmds.getAttr(c+'.postInfinity')
                success_direct = (preA == 3 and postA == 3)
            except Exception:
                success_direct = False
            if success_direct:
                if verbose:
                    print(f"INFINITY_ADV: Direct setAttr success {c} -> (2,2)")
                updated.append(c)
                continue
            # Try cmds.setInfinity
            try:
                cmds.setInfinity(c, preInfinite='cycle', postInfinite='cycle')
            except Exception as e:
                if verbose:
                    print(f"INFINITY_ADV: cmds.setInfinity failed {c}: {e}")
            try:
                preB = cmds.getAttr(c+'.preInfinity')
                postB = cmds.getAttr(c+'.postInfinity')
                if preB == 3 and postB == 3:
                    if verbose:
                        print(f"INFINITY_ADV: cmds.setInfinity success {c}")
                    updated.append(c)
                    continue
            except Exception:
                pass
            # Try OpenMaya API
            try:
                import maya.api.OpenMaya as om
                sel = om.MSelectionList(); sel.add(c)
                mobj = sel.getDependNode(0)
                fn = om.MFnDependencyNode(mobj)
                for attr in ('preInfinity','postInfinity'):
                    plug = fn.findPlug(attr, False)
                    plug.setInt(3)
                preC = cmds.getAttr(c+'.preInfinity')
                postC = cmds.getAttr(c+'.postInfinity')
                if preC == 3 and postC == 3:
                    if verbose:
                        print(f"INFINITY_ADV: OpenMaya plug success {c}")
                    updated.append(c)
                    continue
            except Exception as e:
                if verbose:
                    print(f"INFINITY_ADV: OpenMaya attempt failed {c}: {e}")
            # Record for batch MEL attempt
            pending.append(c)
        # Batch MEL (single selection) if any pending
        if pending:
            if verbose:
                print(f"INFINITY_ADV: Batch MEL attempt on {len(pending)} pending curves")
            try:
                import maya.mel as mel
                mel.eval('select -r ' + ' '.join(pending) + ';')
                # Single call specifying both flags sometimes behaves differently than split calls
                mel.eval('setInfinity -pri 2 -poi 2;')  # numeric flags
                # Also try named for safety
                mel.eval('setInfinity -pri "cycle" -poi "cycle";')
            except Exception as e:
                if verbose:
                    print(f"INFINITY_ADV: Batch MEL failure: {e}")
            # Re-check
            recheck = []
            for c in list(pending):
                try:
                    if cmds.getAttr(c+'.preInfinity') == 3 and cmds.getAttr(c+'.postInfinity') == 3:
                        updated.append(c)
                    else:
                        recheck.append(c)
                except Exception:
                    recheck.append(c)
            pending = recheck
        # Single-key warning
        for c in list(pending):
            try:
                kcount = cmds.keyframe(c, query=True, keyframeCount=True)
                if kcount < 2:
                    if verbose:
                        print(f"INFINITY_ADV: {c} has <2 keys; cycling pre/post may be suppressed by Maya.")
            except Exception:
                pass
        return updated, pending

    # ---------------------
    # Manual infinity application
    # ---------------------
    def _collect_anim_curves_from_nodes(self, nodes):
        curves = []
        for node in nodes:
            if not cmds.objExists(node):
                continue
            # Method 1: keyframe query
            try:
                kcurves = cmds.keyframe(node, query=True, name=True) or []
                for c in kcurves:
                    if c not in curves:
                        curves.append(c)
            except Exception:
                pass
            # Method 2: listConnections by animCurve
            try:
                conns = cmds.listConnections(node, source=True, destination=False) or []
                for c in conns:
                    try:
                        if cmds.objExists(c) and cmds.nodeType(c).startswith('animCurve') and c not in curves:
                            curves.append(c)
                    except Exception:
                        continue
            except Exception:
                pass
        return curves

    def apply_cycle_infinity_for_selection(self, *_):
        sel = cmds.ls(selection=True) or []
        if not sel:
            cmds.warning("Select controls or animCurves to apply cycle infinity.")
            return

        # Ensure 2+ keys is now always enabled by default
        ensure_two_keys = True

        direct_curves = [s for s in sel if cmds.objExists(s) and cmds.nodeType(s).startswith('animCurve')]
        target_nodes = [s for s in sel if s not in direct_curves]
        curves = list(direct_curves)
        curves += self._collect_anim_curves_from_nodes(target_nodes)
        curves = list(dict.fromkeys(curves))  # unique preserve

        if ensure_two_keys:
            for curve in curves:
                self._ensure_two_keys(curve)

        if not curves:
            cmds.warning("No animCurves found on selection.")
            return

        updated, failed = self._apply_cycle_infinity_advanced(curves, verbose=False)

        # Always generate the manual script for all curves
        self.generate_manual_infinity_script(curves)

        if updated and not failed:
            cmds.inViewMessage(amg=f"Applied cycle infinity to {len(updated)} curve(s)", pos='midCenter', fade=True)
        elif updated:
            cmds.inViewMessage(amg=f"Cycle infinity partial: {len(updated)}/{len(curves)}", pos='midCenter', fade=True)

    def generate_manual_infinity_script(self, curves):
        """Generate a script to manually apply infinity settings to the given curves."""
        if not curves:
            print("No curves provided to generate a manual script.")
            return

        script_lines = []
        for curve in curves:
            if cmds.objExists(curve):
                script_lines.append(f"cmds.setAttr('{curve}.preInfinity', 3)")
                script_lines.append(f"cmds.setAttr('{curve}.postInfinity', 3)")

        if script_lines:
            print("\n# Generated script to manually apply infinity settings:\n")
            for line in script_lines:
                print(line)
            print("\n# End of script\n")
        else:
            print("No valid curves found to generate a script.")

    def _apply_infinity_from_source(self, source_curve, target_curve):
        """Copy pre/post infinity from source_curve to target_curve.
        If force_cycle is enabled, applies cycle infinity instead.
        """
        if not source_curve or not target_curve:
            return
            
        # Force cycle infinity is now always enabled by default
        force_cycle = True
            
        if force_cycle:
            # Force cycle using direct attr method
            self._apply_cycle_infinity_mel([target_curve])
            return
            
        try:
            pre_val = cmds.getAttr('{}.preInfinity'.format(source_curve))
            post_val = cmds.getAttr('{}.postInfinity'.format(source_curve))
        except Exception:
            return
        inf_map = {0: 'constant', 1: 'linear', 2: 'cycle', 3: 'cycleRelative', 4: 'oscillate'}
        pre_str = inf_map.get(pre_val, 'constant')
        post_str = inf_map.get(post_val, 'constant')

        try:
            # Select the curve and use MEL commands for reliability
            cmds.select(target_curve, replace=True)
            import maya.mel as mel
            mel.eval(f"setInfinity -pri {pre_str};")
            mel.eval(f"setInfinity -poi {post_str};")
        except Exception:
            # Fallback to direct attribute setting
            try:
                cmds.setAttr('{}.preInfinity'.format(target_curve), pre_val)
                cmds.setAttr('{}.postInfinity'.format(target_curve), post_val)
            except Exception:
                pass

    def _keyed_attributes(self, node):
        """Return a list of attribute names on node that have connected animCurves."""
        attrs = []
        try:
            curves = cmds.keyframe(node, query=True, name=True) or []
        except Exception:
            curves = []
        if not curves:
            return attrs
        for c in set(curves):
            try:
                dest_plugs = cmds.listConnections(c + '.output', s=False, d=True, p=True) or []
            except Exception:
                dest_plugs = []
            for plug in dest_plugs:
                if plug.startswith(node + '.'):
                    attrs.append(plug.split('.')[-1])
        return list(dict.fromkeys(attrs))  # unique, preserve order

    # =========================================================================
    # SECTION 8: SPINE/CENTERLINE PROCESSING
    # =========================================================================

    def _get_spine_controls(self):
        """Return list of spine controls from UI."""
        try:
            return cmds.textScrollList(self.spine_controls_list, query=True, allItems=True) or []
        except Exception:
            return []
    
    def add_selected_to_spine_list(self, *_):
        """Add currently selected objects to the spine controls list."""
        selected = cmds.ls(selection=True) or []
        if not selected:
            cmds.warning("No objects selected to add to spine controls list.")
            return
        
        current_items = cmds.textScrollList(self.spine_controls_list, query=True, allItems=True) or []
        
        added_count = 0
        for item in selected:
            if item not in current_items:
                cmds.textScrollList(self.spine_controls_list, edit=True, append=item)
                added_count += 1
        
        print(f"Added {added_count} controls to spine list")
    
    def remove_selected_from_spine_list(self, *_):
        """Remove selected items from the spine controls list."""
        selected_items = cmds.textScrollList(self.spine_controls_list, query=True, selectItem=True) or []
        if not selected_items:
            cmds.warning("No items selected in the spine controls list to remove.")
            return
        
        for item in selected_items:
            cmds.textScrollList(self.spine_controls_list, edit=True, removeItem=item)
        
        print(f"Removed {len(selected_items)} controls from spine list")
    
    def clear_spine_list(self, *_):
        """Clear all items from the spine controls list."""
        cmds.textScrollList(self.spine_controls_list, edit=True, removeAll=True)
        print("Cleared all controls from spine list")

    def clear_all_control_pairs(self, *_):
        """Clear all left/right control pairs."""
        # Clear the data arrays
        self.left_controls.clear()
        self.right_controls.clear()
        self.control_offsets.clear()
        self.control_inversions.clear()
        
        # Refresh the UI to remove all rows
        self._refresh_control_pairs_ui()
        print("Cleared all left/right control pairs")

    def _set_all_offsets(self, value):
        """Set the same offset value for all control pairs in Cycle Maker tab."""
        for i in range(len(self.control_offsets)):
            self.control_offsets[i] = value
        self._refresh_control_pairs_ui()
        print(f"Set all offsets to {value}")

    def _set_all_inversions(self, axis, value):
        """Set the same inversion value for all control pairs for a specific axis."""
        for i in range(len(self.control_inversions)):
            self.control_inversions[i][axis] = value
        self._refresh_control_pairs_ui()
        print(f"Set all {axis} inversions to {value}")

    def _set_all_copy_time_offsets(self, value):
        """Set the same time offset value for all objects in Copy with Offset tab."""
        for i in range(len(self.copy_offset_time_offsets)):
            self.copy_offset_time_offsets[i] = value
        self._refresh_copy_offset_ui()
        print(f"Set all time offsets to {value}")

    def _set_all_copy_value_offsets(self, value):
        """Set the same value offset for all objects in Copy with Offset tab."""
        for i in range(len(self.copy_offset_value_offsets)):
            self.copy_offset_value_offsets[i] = value
        self._refresh_copy_offset_ui()
        print(f"Set all value offsets to {value}")

    def _set_all_copy_channels(self, channel, value):
        """Set the same channel setting for all objects in Copy with Offset tab."""
        for i in range(len(self.copy_offset_channel_settings)):
            self.copy_offset_channel_settings[i][channel] = value
        self._refresh_copy_offset_ui()
        print(f"Set all {channel} channels to {value}")

    def add_selected_copy_objects(self, *_):
        """Add selected objects to the Copy with Offset list."""
        selection = cmds.ls(selection=True)
        if not selection:
            cmds.warning("Please select objects to add to the Copy with Offset list.")
            return
        
        added_count = 0
        for obj in selection:
            if obj not in self.copy_offset_objects:
                # Add object data
                self.copy_offset_objects.append(obj)
                self.copy_offset_time_offsets.append(10)  # Default time offset
                self.copy_offset_value_offsets.append(0.0)  # Default value offset
                
                # Default channel settings - all enabled by default
                self.copy_offset_channel_settings.append({
                    'tx': True, 'ty': True, 'tz': True,
                    'rx': True, 'ry': True, 'rz': True
                })
                added_count += 1
        
        # Refresh UI to show new objects
        self._refresh_copy_offset_ui()
        
        if added_count > 0:
            print(f"Added {added_count} objects to Copy with Offset list")
        else:
            cmds.warning("Selected objects are already in the list.")

    def clear_all_copy_objects(self, *_):
        """Clear all objects from the Copy with Offset list."""
        self.copy_offset_objects.clear()
        self.copy_offset_time_offsets.clear()
        self.copy_offset_value_offsets.clear()
        self.copy_offset_channel_settings.clear()
        
        # Refresh the UI to remove all rows
        self._refresh_copy_offset_ui()
        print("Cleared all Copy with Offset objects")

    def _refresh_copy_offset_ui(self):
        """Refresh the dynamic Copy with Offset objects UI."""
        # Clear existing UI elements
        children = cmds.scrollLayout(self.copy_offset_scroll, query=True, childArray=True) or []
        for child in children:
            cmds.deleteUI(child)
        
        # Set parent to scroll layout
        cmds.setParent(self.copy_offset_scroll)
        cmds.columnLayout(adjustableColumn=True, rowSpacing=3)
        
        # Create rows for each object
        for i, obj in enumerate(self.copy_offset_objects):
            time_offset = self.copy_offset_time_offsets[i] if i < len(self.copy_offset_time_offsets) else 10
            value_offset = self.copy_offset_value_offsets[i] if i < len(self.copy_offset_value_offsets) else 0.0
            channels = self.copy_offset_channel_settings[i] if i < len(self.copy_offset_channel_settings) else {
                'tx': True, 'ty': True, 'tz': True, 'rx': True, 'ry': True, 'rz': True
            }
            
            self._create_copy_offset_row(i, obj, time_offset, value_offset, channels)

    def _create_copy_offset_row(self, index, obj_name, time_offset, value_offset, channels):
        """Create a single object row with offset fields and channel checkboxes."""
        cmds.rowLayout(numberOfColumns=4, columnWidth4=(120, 60, 60, 240))
        
        # Object name (read-only text)
        display_name = obj_name.split(':')[-1] if ':' in obj_name else obj_name
        if len(display_name) > 15:
            display_name = display_name[:12] + "..."
        cmds.text(label=display_name, align="left", annotation=obj_name)
        
        # Time offset field
        time_field = cmds.intField(value=time_offset, width=55,
                                  changeCommand=lambda x, idx=index: self._update_copy_time_offset(idx, x))
        
        # Value offset field
        value_field = cmds.floatField(value=value_offset, width=55, precision=2,
                                     changeCommand=lambda x, idx=index: self._update_copy_value_offset(idx, x))
        
        # Channel checkboxes in nested layout
        cmds.rowLayout(numberOfColumns=6, columnWidth6=(35, 35, 35, 35, 35, 70))
        tx_cb = cmds.checkBox(label='', value=channels['tx'], 
                              changeCommand=lambda x, idx=index, ch='tx': self._update_copy_channel(idx, ch, x))
        ty_cb = cmds.checkBox(label='', value=channels['ty'],
                              changeCommand=lambda x, idx=index, ch='ty': self._update_copy_channel(idx, ch, x))
        tz_cb = cmds.checkBox(label='', value=channels['tz'],
                              changeCommand=lambda x, idx=index, ch='tz': self._update_copy_channel(idx, ch, x))
        rx_cb = cmds.checkBox(label='', value=channels['rx'],
                              changeCommand=lambda x, idx=index, ch='rx': self._update_copy_channel(idx, ch, x))
        ry_cb = cmds.checkBox(label='', value=channels['ry'],
                              changeCommand=lambda x, idx=index, ch='ry': self._update_copy_channel(idx, ch, x))
        
        # RZ checkbox and Remove button in combined column
        cmds.rowLayout(numberOfColumns=2, columnWidth2=(35, 35))
        rz_cb = cmds.checkBox(label='', value=channels['rz'],
                              changeCommand=lambda x, idx=index, ch='rz': self._update_copy_channel(idx, ch, x))
        cmds.button(label="X", width=30,
                    command=lambda x, idx=index: self._remove_copy_object(idx),
                    backgroundColor=(0.7, 0.5, 0.5))  # Red for remove actions
        cmds.setParent('..')  # inner rowLayout (RZ + Remove button)
        cmds.setParent('..')  # channel checkboxes layout
        
        cmds.setParent('..')  # main rowLayout

    def _update_copy_time_offset(self, index, value):
        """Update time offset for a specific copy object."""
        if index < len(self.copy_offset_time_offsets):
            self.copy_offset_time_offsets[index] = value

    def _update_copy_value_offset(self, index, value):
        """Update value offset for a specific copy object."""
        if index < len(self.copy_offset_value_offsets):
            self.copy_offset_value_offsets[index] = value

    def _update_copy_channel(self, index, channel, value):
        """Update channel setting for a specific copy object."""
        if index < len(self.copy_offset_channel_settings):
            self.copy_offset_channel_settings[index][channel] = value

    def _remove_copy_object(self, index):
        """Remove a copy object from the list."""
        if 0 <= index < len(self.copy_offset_objects):
            obj_name = self.copy_offset_objects[index]
            self.copy_offset_objects.pop(index)
            self.copy_offset_time_offsets.pop(index)
            self.copy_offset_value_offsets.pop(index)
            self.copy_offset_channel_settings.pop(index)
            
            # Refresh UI
            self._refresh_copy_offset_ui()
            print(f"Removed {obj_name} from Copy with Offset list")

    def _should_invert_for_spine(self, node_name, attr):
        """True if node matches spine controls list and attr is selected for inversion (rotateY/rotateZ)."""
        spine_controls = self._get_spine_controls()
        if node_name not in spine_controls:
            return False
        try:
            invert_y = cmds.checkBox(self.invert_y_chk, query=True, value=True)
            invert_z = cmds.checkBox(self.invert_z_chk, query=True, value=True)
        except Exception:
            invert_y = self.spine_invert_y_default
            invert_z = self.spine_invert_z_default
        if attr == 'rotateY' and invert_y:
            return True
        if attr == 'rotateZ' and invert_z:
            return True
        return False

    # =========================================================================
    # SECTION 9: WING/PURE MIRROR CONTROLS MANAGEMENT
    # =========================================================================
    
    def add_selected_to_wing_list(self, *_):
        """Add selected controls to the wing controls list as pairs."""
        sel = cmds.ls(selection=True)
        if not sel:
            cmds.warning("No controls selected.")
            return
        
        added_count = 0
        for ctrl in sel:
            # Use full control name (with namespace) for wing controls
            if self.is_left(ctrl):
                right_ctrl = self.get_other_side(ctrl, left_to_right=True)
                if ctrl not in self.wing_left_controls and right_ctrl not in self.wing_right_controls:
                    self.wing_left_controls.append(ctrl)
                    self.wing_right_controls.append(right_ctrl)
                    added_count += 1

            elif self.is_right(ctrl):
                left_ctrl = self.get_other_side(ctrl, left_to_right=False)
                if ctrl not in self.wing_right_controls and left_ctrl not in self.wing_left_controls:
                    self.wing_right_controls.append(ctrl)
                    self.wing_left_controls.append(left_ctrl)
                    added_count += 1

            else:
                # Add as single control (for backward compatibility with old wing list)
                current_items = cmds.textScrollList(self.wing_controls_list, query=True, allItems=True) or []
                if ctrl not in current_items:
                    cmds.textScrollList(self.wing_controls_list, edit=True, append=ctrl)
                    added_count += 1
        
        # Refresh the wing pairs UI
        self._refresh_wing_pairs_ui()

    
    def remove_selected_from_wing_list(self, *_):
        """Remove selected items from the wing controls list."""
        selected_items = cmds.textScrollList(self.wing_controls_list, query=True, selectItem=True) or []
        if not selected_items:
            cmds.warning("No items selected in the wing controls list to remove.")
            return
        
        for item in selected_items:
            cmds.textScrollList(self.wing_controls_list, edit=True, removeItem=item)
        

    
    def clear_wing_list(self, *_):
        """Clear all items from the wing controls list."""
        cmds.textScrollList(self.wing_controls_list, edit=True, removeAll=True)
        # Also clear wing pairs
        self.wing_left_controls = []
        self.wing_right_controls = []
        self.wing_control_inversions = []
        self._refresh_wing_pairs_ui()

    
    def _refresh_wing_pairs_ui(self):
        """Refresh the dynamic wing pairs UI."""
        # Clear existing UI elements
        children = cmds.scrollLayout(self.wing_pairs_scroll, query=True, childArray=True) or []
        for child in children:
            cmds.deleteUI(child)
        
        # Set parent to scroll layout's column
        cmds.setParent(self.wing_pairs_scroll)
        cmds.columnLayout(adjustableColumn=True, rowSpacing=2)
        
        # Add header row
        if self.wing_left_controls:
            cmds.rowLayout(numberOfColumns=4, columnWidth4=(150, 150, 180, 60))
            cmds.text(label="Left Wing", align="center", backgroundColor=(0.3, 0.3, 0.4))
            cmds.text(label="Right Wing", align="center", backgroundColor=(0.4, 0.3, 0.3))
            cmds.text(label="Invert: TX TY TZ RX RY RZ", align="center", backgroundColor=(0.35, 0.35, 0.35))
            cmds.text(label="Action", align="center", backgroundColor=(0.3, 0.35, 0.4))
            cmds.setParent('..')
        
        # Create a row for each wing pair
        for i, (left_ctrl, right_ctrl) in enumerate(zip(self.wing_left_controls, self.wing_right_controls)):
            # Ensure we have inversion data for this pair
            while len(self.wing_control_inversions) <= i:
                # Default wing inversion settings - all unchecked by default
                self.wing_control_inversions.append({
                    'tx': False, 'ty': False, 'tz': False,
                    'rx': False, 'ry': False, 'rz': False
                })
            
            inversion = self.wing_control_inversions[i]
            self._create_wing_pair_row(i, left_ctrl, right_ctrl, inversion)
        
        cmds.setParent('..')  # columnLayout
    
    def _create_wing_pair_row(self, index, left_ctrl, right_ctrl, inversion):
        """Create a single wing pair row with inversion checkboxes."""
        cmds.rowLayout(numberOfColumns=4, columnWidth4=(150, 150, 180, 60))
        
        # Left control (read-only text)
        cmds.text(label=left_ctrl, align="left")
        
        # Right control (read-only text)  
        cmds.text(label=right_ctrl, align="left")
        
        # Inversion checkboxes
        cmds.rowLayout(numberOfColumns=6, columnWidth6=(30, 30, 30, 30, 30, 30))
        tx_cb = cmds.checkBox(label='', value=inversion['tx'], 
                              changeCommand=lambda x, idx=index, axis='tx': self._update_wing_inversion(idx, axis, x))
        ty_cb = cmds.checkBox(label='', value=inversion['ty'],
                              changeCommand=lambda x, idx=index, axis='ty': self._update_wing_inversion(idx, axis, x))
        tz_cb = cmds.checkBox(label='', value=inversion['tz'],
                              changeCommand=lambda x, idx=index, axis='tz': self._update_wing_inversion(idx, axis, x))
        rx_cb = cmds.checkBox(label='', value=inversion['rx'],
                              changeCommand=lambda x, idx=index, axis='rx': self._update_wing_inversion(idx, axis, x))
        ry_cb = cmds.checkBox(label='', value=inversion['ry'],
                              changeCommand=lambda x, idx=index, axis='ry': self._update_wing_inversion(idx, axis, x))
        rz_cb = cmds.checkBox(label='', value=inversion['rz'],
                              changeCommand=lambda x, idx=index, axis='rz': self._update_wing_inversion(idx, axis, x))
        cmds.setParent('..')  # rowLayout (checkboxes)
        
        # Remove button
        cmds.button(label="X", width=30,
                    command=lambda x, idx=index: self._remove_wing_pair(idx),
                    backgroundColor=(0.7, 0.5, 0.5))
        
        cmds.setParent('..')  # rowLayout (main row)
    
    def _update_wing_inversion(self, index, axis, value):
        """Update inversion setting for a specific wing pair and axis."""
        if index < len(self.wing_control_inversions):
            self.wing_control_inversions[index][axis] = value

    
    def _remove_wing_pair(self, index):
        """Remove a wing pair and refresh the UI."""
        if 0 <= index < len(self.wing_left_controls):
            left_ctrl = self.wing_left_controls.pop(index)
            right_ctrl = self.wing_right_controls.pop(index)
            if index < len(self.wing_control_inversions):
                self.wing_control_inversions.pop(index)

            self._refresh_wing_pairs_ui()
    
    def mirror_wing_left_to_right(self, *_):
        """Mirror animation from left wing controls to right wing controls."""
        self._mirror_wing_controls(left_to_right=True)
    
    def mirror_wing_right_to_left(self, *_):
        """Mirror animation from right wing controls to left wing controls."""
        self._mirror_wing_controls(left_to_right=False)
    
    def _mirror_wing_controls(self, left_to_right=True):
        """Mirror wing controls with pure mirroring (offsets set to 0)."""
        wing_controls = cmds.textScrollList(self.wing_controls_list, query=True, allItems=True) or []
        if not wing_controls:
            cmds.warning("No wing controls defined. Add controls to the Wing Controls list first.")
            return

        direction = "Left â†’ Right" if left_to_right else "Right â†’ Left"


        processed = 0
        for control in wing_controls:
            try:
                # Get the opposite side - if control is left, get right; if control is right, get left
                if self.is_left(control):
                    other_control = self.get_other_side(control, left_to_right=True)  # L -> R
                else:
                    other_control = self.get_other_side(control, left_to_right=False)  # R -> L
        
                if other_control and other_control != control:
                    # Determine source and target based on the direction we want
                    if left_to_right:
                        # Left â†’ Right: copy from left control to right control
                        if self.is_left(control):
                            source, target = control, other_control
                        else:
                            source, target = other_control, control
                    else:
                        # Right â†’ Left: copy from right control to left control
                        if self.is_right(control):
                            source, target = control, other_control
                        else:
                            source, target = other_control, control
                    
                    self._copy_with_offset(source, target)
                    processed += 1
                else:
                    print(f"Could not find matching control for {control}")
            except Exception as e:
                print(f"Error mirroring {control}: {e}")

        if processed > 0:
            cmds.inViewMessage(amg=f"Mirrored {processed} wing control(s) {direction}", 
                             pos='midCenter', fade=True)
        else:
            cmds.warning("No wing controls were mirrored. Check control names and pairs.")
    
    def _copy_wing_animation(self, source_ctrl, target_ctrl):
        """Copy animation between wing controls with pure mirroring (no offset)."""
        # Wing controls are stored with their full namespace - use them as-is
        source_full = source_ctrl
        target_full = target_ctrl
        
        if not (cmds.objExists(source_full) and cmds.objExists(target_full)):
            print(f"Wing control not found: {source_full} or {target_full}")
            return
        
        # Get animated attributes from source
        source_keyed_attrs = self._keyed_attributes(source_full)
        if not source_keyed_attrs:
            print(f"No keyed attributes found on source wing control {source_full}")
            return
        
        # Copy each animated attribute
        for attr in source_keyed_attrs:
            source_attr = f"{source_full}.{attr}"
            target_attr = f"{target_full}.{attr}" 
            
            if not self._target_has_attribute(target_full, attr):
                continue
            
            # Get source curve
            source_curve = self._anim_curve_for_attr(source_attr)
            if not source_curve:
                continue
            
            # Copy keys (no offset applied)
            if self._copy_and_paste_keys(source_attr, target_attr, source_curve):
                # Apply successful tangent smoothing and cycle infinity
                self._smooth_cycle_transitions(target_attr)
                self._apply_cycle_infinity(target_attr)
                print(f"Mirrored wing animation: {source_attr} â†’ {target_attr}")
        

    def _playback_cycle_range(self):
        """Return (start, end, mid) from playback options, fallback to (0,40,20)."""
        try:
            start = float(cmds.playbackOptions(query=True, min=True))
            end = float(cmds.playbackOptions(query=True, max=True))
        except Exception:
            start, end = 0.0, 40.0
        if end <= start:
            end = start + 40.0
        mid = (start + end) / 2.0
        return start, end, mid

    def _has_key_at(self, plug, t):
        """Return True if there's a key on plug at time t."""
        try:
            times = cmds.keyframe(plug, query=True, time=(t, t), timeChange=True) or []
            return any(abs(tt - t) < 1e-4 for tt in times)
        except Exception:
            return False

    def _ensure_key(self, plug, t, value=None):
        """Ensure a key exists at time t with a given value (or current eval if None)."""
        try:
            if value is None:
                value = cmds.getAttr(plug, time=t)
            cmds.setKeyframe(plug, time=t, value=value)
        except Exception:
            pass

    def _rebuild_second_half_antiphase(self, plug, start, mid, end):
        """Make [mid,end] equal to the negative of [start,mid] for the given plug."""
        # Anchor values
        try:
            v_start = cmds.getAttr(plug, time=start)
        except Exception:
            v_start = None
        if not self._has_key_at(plug, start):
            self._ensure_key(plug, start, v_start)
        if not self._has_key_at(plug, mid):
            # Create a temp key at mid to aid paste alignment
            self._ensure_key(plug, mid, v_start if v_start is not None else None)

        # Unlock if needed
        relock = False
        try:
            if cmds.getAttr(plug, lock=True):
                relock = True
                cmds.setAttr(plug, lock=False)
        except Exception:
            pass

        # Clear second half
        try:
            cmds.cutKey(plug, time=(mid, end))
        except Exception:
            pass

        # Copy first half [start, mid) and paste to [mid, end)
        try:
            cmds.copyKey(plug, time=(start, mid), includeUpperBound=False)
        except Exception as e:
            cmds.warning(f"copyKey failed on {plug} [{start},{mid}): {e}")
            return
        try:
            # Merge to avoid wiping existing keys in the first half
            cmds.pasteKey(plug, option='merge', timeOffset=(mid - start))
        except Exception as e:
            # Fallback minimal paste
            try:
                cmds.pasteKey(plug, option='merge')
            except Exception as e2:
                cmds.warning(f"pasteKey failed on {plug}: {e2}")
                return

        # Negate pasted second half
        try:
            cmds.scaleKey(plug, time=(mid, end), valueScale=-1.0)
        except Exception as e:
            cmds.warning(f"scaleKey invert failed on {plug}: {e}")

        # Enforce anchors: end==start, mid==-start
        try:
            if v_start is None:
                v_start = cmds.getAttr(plug, time=start)
        except Exception:
            v_start = 0.0
        self._ensure_key(plug, mid, -float(v_start))
        self._ensure_key(plug, end, float(v_start))

        # Apply tangent smoothing for spine antiphase cycles
        self._smooth_spine_transitions(plug, start, mid, end, is_antiphase=True)
        
        # Apply cycle infinity for seamless looping
        self._apply_cycle_infinity(plug)

        # Relock
        if relock:
            try:
                cmds.setAttr(plug, lock=True)
            except Exception:
                pass

    def _ensure_two_keys(self, curve):
        """Ensure the given curve has at least two keys."""
        try:
            key_times = cmds.keyframe(curve, query=True, timeChange=True) or []
            if len(key_times) < 2:
                value = cmds.keyframe(curve, query=True, valueChange=True)[0]
                playback_start = cmds.playbackOptions(query=True, min=True)
                playback_end = cmds.playbackOptions(query=True, max=True)
                cmds.setKeyframe(curve, time=playback_start, value=value)
                cmds.setKeyframe(curve, time=playback_end, value=value)
        except Exception:
            pass

    # =========================================================================
    # SECTION 6: ANIMATION CORE FUNCTIONS
    # =========================================================================

    def get_key_options(self):
        """Get common key options for copy/paste operations."""
        # Calculate time offset as half the cycle length (time range)
        try:
            start_time = cmds.playbackOptions(query=True, min=True)
            end_time = cmds.playbackOptions(query=True, max=True)
            time_offset = (end_time - start_time) / 2.0
        except Exception:
            time_offset = 20  # Default fallback
        
        return {
            "option": "replaceCompletely",
            "copies": 1,
            "timeOffset": time_offset,
            # Only include flags supported by pasteKey
        }

    def copy_keys(self, source_ctrl, target_ctrl):
        """Copy keys from source to target control with auto-inversion and infinity handling."""
        # Validate and get full control names
        source_full, target_full = self._get_full_control_names(source_ctrl, target_ctrl)
        if not source_full or not target_full:
            return
            
        # Safety check: don't copy to same control
        if source_full == target_full:
            cmds.warning(f"Source and target resolve to the same node '{source_full}'. Skipping.")
            return
        
        if not (cmds.objExists(source_full) and cmds.objExists(target_full)):
            cmds.warning(f"Control not found: {source_full} or {target_full}")
            return
            
        # Get animated attributes and copy each one
        source_keyed_attrs = self._keyed_attributes(source_full)
        if not source_keyed_attrs:
            cmds.warning(f"No keyed attributes found on source {source_full}.")
            return
            
        copied_any = False
        for attr in source_keyed_attrs:
            if self._copy_single_attribute(source_full, target_full, attr, source_ctrl, target_ctrl):
                copied_any = True
                
        if not copied_any:
            cmds.warning(f"No matching attributes on target {target_full} for source keyed attributes: {source_keyed_attrs}")

    def _get_full_control_names(self, source_ctrl, target_ctrl):
        """Get full control names including prefix."""
        prefix = cmds.textField(self.prefix_field, query=True, text=True)
        source_full = f"{prefix}{source_ctrl}" if not source_ctrl.startswith(prefix) else source_ctrl
        target_full = f"{prefix}{target_ctrl}" if not target_ctrl.startswith(prefix) else target_ctrl
        return source_full, target_full
        
    def _copy_single_attribute(self, source_full, target_full, attr, source_ctrl, target_ctrl):
        """Copy animation for a single attribute from source to target."""
        source_attr = f"{source_full}.{attr}"
        target_attr = f"{target_full}.{attr}"
        
        # Skip if target doesn't have this attribute
        if not self._target_has_attribute(target_full, attr):
            return False
            
        # Get source animation curve
        source_curve = self._anim_curve_for_attr(source_attr)
        if not source_curve:
            return False
            
        # Copy and paste the keys
        if not self._copy_and_paste_keys(source_attr, target_attr, source_curve):
            return False
            
        # Apply post-processing (inversion, infinity)
        self._apply_post_processing(target_attr, attr, source_ctrl, target_ctrl, source_curve)
        return True
        
    def _target_has_attribute(self, target_full, attr):
        """Check if target control has the specified attribute."""
        try:
            return cmds.attributeQuery(attr, node=target_full, exists=True)
        except Exception:
            return False
            
    def _copy_and_paste_keys(self, source_attr, target_attr, source_curve):
        """Copy keys from source to target attribute."""
        # Get time range
        time_range = cmds.keyframe(source_curve, query=True, timeChange=True)
        if not time_range:
            return False
            
        start_t = min(time_range)
        end_t = max(time_range)
        
        # Copy keys from source
        try:
            cmds.copyKey(source_attr, time=(start_t, end_t), includeUpperBound=True)
        except Exception as e:
            cmds.warning(f"copyKey failed on {source_attr}: {e}")
            return False
            
        # Handle locked attributes
        relock = self._handle_attribute_lock(target_attr, unlock=True)
        
        # Paste keys with fallback
        paste_success = self._paste_keys_with_fallback(target_attr)
        
        # Restore lock state
        if relock:
            self._handle_attribute_lock(target_attr, lock=True)
            
        return paste_success
    
    def _copy_with_offset(self, source_ctrl, target_ctrl, time_offset=0, value_offset=0.0):
        """Copy animation between controls with specified time and value offsets."""
        source_full = source_ctrl
        target_full = target_ctrl

        if not (cmds.objExists(source_full) and cmds.objExists(target_full)):
            print(f"Control not found: {source_full} or {target_full}")
            return

        # Get keyed attributes first
        source_keyed_attrs = self._keyed_attributes(source_full)
        
        # If no keyed attributes, get all animatable attributes and copy current values
        if not source_keyed_attrs:

            self._copy_current_values(source_full, target_full, time_offset, value_offset)
            return

        # First normalize source curves to fit timeline range
        print(f"DEBUG: Normalizing source curves for {source_full}")
        self._normalize_curves_to_timeline(source_full, source_keyed_attrs)

        # Copy keyed animation
        for attr in source_keyed_attrs:
            source_attr = f"{source_full}.{attr}"
            target_attr = f"{target_full}.{attr}"

            if not self._target_has_attribute(target_full, attr):
                continue

            source_curve = self._anim_curve_for_attr(source_attr)
            if not source_curve:
                continue

            if self._copy_and_paste_keys_with_offset(source_attr, target_attr, source_curve, time_offset, value_offset):
                # Apply wing control specific post-processing (always invert X for wings)
                self._apply_wing_post_processing(target_attr, attr, source_full, target_full, source_curve)
                
                # Set infinity to cycle for Copy with Offset functionality - ensure it's applied
                self._apply_cycle_infinity(target_attr)
                
                # Timeline fitting disabled - cycle infinity handles offset curves properly
                # Keyframes can extend beyond timeline when using cycle infinity

    
    def _smooth_cycle_transitions(self, target_attr):
        """Simple but effective tangent smoothing for cycle continuity."""
        try:
            # Get all keyframes for this attribute
            keyframes = cmds.keyframe(target_attr, query=True, timeChange=True)
            if not keyframes or len(keyframes) < 2:
                return
            
            keyframes = sorted(keyframes)
            first_time = keyframes[0]
            last_time = keyframes[-1]
            
            print(f"DEBUG: Smoothing cycle for {target_attr}: {len(keyframes)} keys")
            
            # DEBUG: Check tangent types BEFORE smoothing
            in_tangents = cmds.keyTangent(target_attr, query=True, inTangentType=True)
            out_tangents = cmds.keyTangent(target_attr, query=True, outTangentType=True)
            print(f"DEBUG: Before smoothing - in tangents: {in_tangents[:min(3, len(in_tangents))]}")
            print(f"DEBUG: Before smoothing - out tangents: {out_tangents[:min(3, len(out_tangents))]}")
            
            # Special case: 3 keys (beginning, middle, end) should all be flat
            if len(keyframes) == 3:
                print(f"DEBUG: 3-key cycle detected - applying flat tangents for smooth motion")
                for time in keyframes:
                    cmds.keyTangent(target_attr, time=(time,), edit=True,
                                   inTangentType='flat', outTangentType='flat')
                return
            
            # Simple and effective: just preserve existing tangent quality
            # Don't overthink it - if the original curve had good tangents, keep them
            # Only fix the cycle boundaries for seamless looping
            if len(keyframes) >= 3:
                # For cycle continuity, make first and last keyframes have matching tangents
                # But use the EXISTING tangent style, don't force new calculations
                
                # Get the current tangent at the first keyframe's out tangent
                first_out_tangent = cmds.keyTangent(target_attr, time=(first_time,), query=True, outTangentType=True)[0]
                last_in_tangent = cmds.keyTangent(target_attr, time=(last_time,), query=True, inTangentType=True)[0]
                
                # If they're already good tangent types, just ensure they match
                if first_out_tangent in ['spline', 'linear', 'auto'] and last_in_tangent in ['spline', 'linear', 'auto']:
                    # Keep the better tangent type for both boundaries
                    better_tangent = 'spline' if 'spline' in [first_out_tangent, last_in_tangent] else first_out_tangent
                    
                    cmds.keyTangent(target_attr, time=(first_time,), edit=True, outTangentType=better_tangent)
                    cmds.keyTangent(target_attr, time=(last_time,), edit=True, inTangentType=better_tangent)
                    
                    print(f"DEBUG: Simple cycle fix - using {better_tangent} tangents for boundaries")
            
            # Leave middle keyframes completely alone - they're fine as they are
            
            print(f"DEBUG: Applied cycle smoothing to {target_attr}")
            
            # DEBUG: Check final tangent types AFTER smoothing
            final_in_tangents = cmds.keyTangent(target_attr, query=True, inTangentType=True)
            final_out_tangents = cmds.keyTangent(target_attr, query=True, outTangentType=True)
            print(f"DEBUG: After smoothing - in tangents: {final_in_tangents[:min(3, len(final_in_tangents))]}")
            print(f"DEBUG: After smoothing - out tangents: {final_out_tangents[:min(3, len(final_out_tangents))]}")
                
        except Exception as e:
            print(f"DEBUG: Tangent smoothing failed for {target_attr}: {e}")
            # Fallback to spline
            try:
                cmds.keyTangent(target_attr, edit=True, inTangentType='spline', outTangentType='spline')
                print(f"DEBUG: Applied fallback spline smoothing to {target_attr}")
            except Exception as e2:
                pass


    def _smooth_spine_transitions(self, plug, start, mid, end, is_antiphase=False):
        """Advanced tangent smoothing for spine cycles with special handling for antiphase."""
        try:
            print(f"DEBUG: Smoothing spine transitions for {plug} ({'antiphase' if is_antiphase else 'standard'} cycle)")
            
            # Get all keyframes in the range
            keyframes = cmds.keyframe(plug, query=True, timeChange=True)
            if not keyframes or len(keyframes) < 3:
                return
            
            # Filter keyframes to our cycle range
            cycle_keys = [k for k in keyframes if start <= k <= end]
            cycle_keys = sorted(cycle_keys)
            
            if len(cycle_keys) < 3:
                return
            
            import math
            
            # For antiphase cycles: smooth the transition at mid point (where phase flips)
            if is_antiphase:
                # Find keyframe closest to mid point
                mid_key = min(cycle_keys, key=lambda x: abs(x - mid))
                mid_idx = cycle_keys.index(mid_key)
                
                if mid_idx > 0 and mid_idx < len(cycle_keys) - 1:
                    # Get surrounding keyframes
                    prev_time = cycle_keys[mid_idx - 1]
                    next_time = cycle_keys[mid_idx + 1]
                    
                    # Get values
                    prev_value = cmds.keyframe(plug, time=(prev_time,), query=True, valueChange=True)[0]
                    mid_value = cmds.keyframe(plug, time=(mid_key,), query=True, valueChange=True)[0]
                    next_value = cmds.keyframe(plug, time=(next_time,), query=True, valueChange=True)[0]
                    
                    # For antiphase, we want smooth transition through zero
                    # Calculate gentle slope that maintains the antiphase relationship
                    pre_slope = (mid_value - prev_value) / (mid_key - prev_time)
                    post_slope = (next_value - mid_value) / (next_time - mid_key)
                    
                    # Average the slopes for smoother transition
                    avg_slope = (pre_slope + post_slope) / 2.0
                    avg_angle = math.degrees(math.atan(avg_slope))
                    
                    # Apply gentle tangents at the phase transition point
                    cmds.keyTangent(plug, time=(mid_key,), edit=True,
                                   inTangentType='fixed', inAngle=avg_angle, inWeight=0.5,
                                   outTangentType='fixed', outAngle=avg_angle, outWeight=0.5)
            
            # For both types: smooth the cycle boundary (start/end points)
            start_key = cycle_keys[0]
            end_key = cycle_keys[-1]
            
            # Get values at boundaries
            start_value = cmds.keyframe(plug, time=(start_key,), query=True, valueChange=True)[0]
            end_value = cmds.keyframe(plug, time=(end_key,), query=True, valueChange=True)[0]
            
            # Calculate natural derivative for cycle continuity
            if len(cycle_keys) >= 3:
                second_key = cycle_keys[1]
                second_value = cmds.keyframe(plug, time=(second_key,), query=True, valueChange=True)[0]
                
                # Natural slope from start to second keyframe
                natural_slope = (second_value - start_value) / (second_key - start_key)
                natural_angle = math.degrees(math.atan(natural_slope))
                
                # Apply matching tangents at cycle boundaries for seamless looping
                cmds.keyTangent(plug, time=(start_key,), edit=True,
                               outTangentType='fixed', outAngle=natural_angle, outWeight=0.4)
                cmds.keyTangent(plug, time=(end_key,), edit=True,
                               inTangentType='fixed', inAngle=natural_angle, inWeight=0.4)
            
            # Apply spline smoothing to intermediate keyframes
            for i, key_time in enumerate(cycle_keys[1:-1], 1):
                if is_antiphase and abs(key_time - mid) < 0.1:
                    continue  # Skip the mid key as we handled it specially
                    
                cmds.keyTangent(plug, time=(key_time,), edit=True,
                               inTangentType='spline', outTangentType='spline')
            
            print(f"DEBUG: Applied spine tangent smoothing to {plug}")
                
        except Exception as e:
            print(f"DEBUG: Spine tangent smoothing failed for {plug}: {e}")

    def _apply_cycle_infinity(self, target_attr):
        """Apply cycle infinity to target attribute with reliable fallback methods."""
        print(f"DEBUG: Attempting to set cycle infinity on: {target_attr}")
        
        # Get the animation curve first (smoothing is done separately now)
        anim_curve = self._anim_curve_for_attr(target_attr)
        if not anim_curve:
            print(f"DEBUG: No animation curve found for {target_attr}")
            return
        
        print(f"DEBUG: Found animation curve: {anim_curve}")
        
        # Method 1: Try selecting keys and using MEL (most reliable)
        try:
            import maya.mel as mel
            print(f"DEBUG: Method 1 - Selecting keys and using MEL")
            
            # Select all keys on this attribute
            cmds.selectKey(target_attr, clear=True)
            cmds.selectKey(target_attr, add=True)
            
            # Use MEL setInfinity command
            mel.eval('setInfinity -pri "cycle" -poi "cycle";')
            
            print(f"DEBUG: Method 1 completed - MEL setInfinity executed")
            
        except Exception as e:
            print(f"DEBUG: Method 1 (MEL) failed: {e}")
            
            # Method 2: Direct attribute setting on animation curve
            try:
                print(f"DEBUG: Method 2 - Direct attribute setting on curve")
                cmds.setAttr(f"{anim_curve}.preInfinity", 3)
                cmds.setAttr(f"{anim_curve}.postInfinity", 3)
                print(f"DEBUG: Method 2 completed - Direct setAttr on curve")
                
            except Exception as e2:
                print(f"DEBUG: Method 2 (setAttr) failed: {e2}")
                
                # Method 3: Original cmds.setInfinity approach
                try:
                    print(f"DEBUG: Method 3 - Original cmds.setInfinity")
                    cmds.setInfinity(target_attr, preInfinite=3, postInfinite=3)
                    print(f"DEBUG: Method 3 completed - cmds.setInfinity executed")
                    
                except Exception as e3:
                    print(f"DEBUG: Method 3 failed: {e3}")
                    cmds.warning(f"All methods failed to set cycle infinity on {target_attr}")
        
        # Verify what was actually set by checking the animation curve
        try:
            # Get the animation curve for this attribute
            anim_curve = self._anim_curve_for_attr(target_attr)
            if anim_curve:
                pre_inf = cmds.getAttr(f"{anim_curve}.preInfinity")
                post_inf = cmds.getAttr(f"{anim_curve}.postInfinity")
                print(f"DEBUG: Verification - {anim_curve} preInfinity: {pre_inf}, postInfinity: {post_inf}")
                
                # Check if the values are what we expect (3 for cycle)
                if pre_inf == 3 and post_inf == 3:
                    print(f"DEBUG: SUCCESS - Cycle infinity correctly set on {target_attr}")
                else:
                    print(f"DEBUG: WARNING - Expected 3,3 but got {pre_inf},{post_inf} on {target_attr}")
            else:
                print(f"DEBUG: No animation curve found for {target_attr} - infinity not applicable")
        except Exception as e:
            print(f"DEBUG: Could not verify infinity settings: {e}")

    def _copy_current_values(self, source_ctrl, target_ctrl, time_offset=0, value_offset=0.0):
        """Copy current channel values from source to target control with mirroring logic."""
        # Common animatable attributes for transforms
        attrs_to_copy = ['translateX', 'translateY', 'translateZ', 
                        'rotateX', 'rotateY', 'rotateZ',
                        'scaleX', 'scaleY', 'scaleZ']
        
        copied_count = 0
        for attr in attrs_to_copy:
            source_attr = f"{source_ctrl}.{attr}"
            target_attr = f"{target_ctrl}.{attr}"
            
            # Check if both controls have this attribute
            if (self._target_has_attribute(source_ctrl, attr) and 
                self._target_has_attribute(target_ctrl, attr)):
                
                try:
                    # Get current value from source
                    current_value = cmds.getAttr(source_attr)
                    
                    # Apply mirroring logic - check if X-axis inversion is needed
                    final_value = current_value + value_offset
                    
                    # Apply axis inversion for translateX, rotateY, and rotateZ if this is a left<->right pair
                    if (attr in ['translateX', 'rotateY', 'rotateZ']) and self.auto_detect_x_inversion:
                        source_is_left = self.is_left(source_ctrl)
                        source_is_right = self.is_right(source_ctrl)
                        target_is_left = self.is_left(target_ctrl)
                        target_is_right = self.is_right(target_ctrl)
                        

                        
                        # Check if this is a left<->right pair
                        if (source_is_left and target_is_right) or (source_is_right and target_is_left):

                            # For wing controls, always apply axis inversion for proper mirroring
                            final_value = -final_value

                        else:
                            pass
                    
                    # Handle locked attributes
                    relock = self._handle_attribute_lock(target_attr, unlock=True)
                    
                    # Set the value on target
                    cmds.setAttr(target_attr, final_value)
                    
                    # Create a keyframe to enable infinity settings for Copy with Offset
                    try:
                        cmds.setKeyframe(target_attr)
                        # Apply cycle infinity for Copy with Offset functionality
                        self._apply_cycle_infinity(target_attr)
                    except Exception:
                        pass  # If keyframe creation fails, continue without infinity
                    
                    # Restore lock state
                    if relock:
                        self._handle_attribute_lock(target_attr, lock=True)
                    

                    copied_count += 1
                    
                except Exception as e:
                    print(f"Failed to copy current value for {attr}: {e}")
        

    
    def _apply_wing_post_processing(self, target_attr, attr, source_ctrl, target_ctrl, source_curve):
        """Apply wing-specific post-processing (always invert translateX and rotateZ for proper mirroring)."""
        # Apply axis inversion for translateX, rotateY, and rotateZ in wing controls (always invert for proper mirroring)
        if attr in ['translateX', 'rotateY', 'rotateZ']:
            source_is_left = self.is_left(source_ctrl)
            source_is_right = self.is_right(source_ctrl)
            target_is_left = self.is_left(target_ctrl)
            target_is_right = self.is_right(target_ctrl)
            
            # Check if this is a left<->right pair
            if (source_is_left and target_is_right) or (source_is_right and target_is_left):

                cmds.scaleKey(target_attr, valueScale=-1.0)

            
        # Apply successful tangent smoothing and cycle infinity
        self._smooth_cycle_transitions(target_attr)
        self._apply_cycle_infinity(target_attr)
    
    def _copy_and_paste_keys_with_offset(self, source_attr, target_attr, source_curve, time_offset=0, value_offset=0.0):
        """Copy keys from source to target attribute with time and value offsets."""
        # Get time range
        time_range = cmds.keyframe(source_curve, query=True, timeChange=True)
        if not time_range:
            return False
            
        start_t = min(time_range)
        end_t = max(time_range)
        
        # Copy keys from source
        try:
            cmds.copyKey(source_attr, time=(start_t, end_t), includeUpperBound=True)
        except Exception as e:
            cmds.warning(f"copyKey failed on {source_attr}: {e}")
            return False
            
        # Handle locked attributes
        relock = self._handle_attribute_lock(target_attr, unlock=True)
        
        # Paste keys with offset
        paste_success = self._paste_keys_with_offset(target_attr, time_offset, value_offset)
        
        # Restore lock state
        if relock:
            self._handle_attribute_lock(target_attr, lock=True)
            
        return paste_success
    
    def _paste_keys_with_offset(self, target_attr, time_offset=0, value_offset=0.0):
        """Paste keys with time and value offsets."""
        # Clear existing keys first to ensure complete replacement
        self._clear_existing_keys(target_attr)
        
        try:
            paste_opts = {'option': 'replaceCompletely'}
            if time_offset != 0:
                paste_opts['timeOffset'] = time_offset
            if value_offset != 0.0:
                paste_opts['valueOffset'] = value_offset
                
            cmds.pasteKey(target_attr, **paste_opts)
            cmds.refresh()  # Allow Maya to process
            return True
        except Exception as e:
            cmds.warning(f"pasteKey with offset failed on {target_attr}: {e}")
            return False
            
    def _fit_curve_to_timeline(self, target_attr, time_offset):
        """Fit offset curves to timeline range by wrapping overhanging keys while preserving timing."""
        try:
            # Get current timeline range
            start_time = cmds.playbackOptions(query=True, minTime=True)
            end_time = cmds.playbackOptions(query=True, maxTime=True)
            timeline_duration = end_time - start_time
            
            # Get current keyframes on the curve
            keyframes = cmds.keyframe(target_attr, query=True, timeChange=True)
            if not keyframes:
                return
                
            keyframes = sorted(keyframes)
            first_key_time = keyframes[0]
            last_key_time = keyframes[-1]
            
            print(f"DEBUG: Timeline fitting - range [{start_time}, {end_time}], keys [{first_key_time}, {last_key_time}]")
            
            # Check if keys extend beyond timeline
            keys_before_start = [t for t in keyframes if t < start_time]
            keys_after_end = [t for t in keyframes if t > end_time]
            
            if keys_before_start or keys_after_end:
                print(f"DEBUG: Found keys outside timeline - before: {len(keys_before_start)}, after: {len(keys_after_end)}")
                
                # Simple approach: wrap overhanging keys to the opposite end of timeline
                # This preserves the original keyframe timing and values
                
                if keys_after_end:
                    # Move keys that are past the end to the beginning
                    for key_time in keys_after_end:
                        # Get the key's value and tangent info
                        key_value = cmds.keyframe(target_attr, time=(key_time,), query=True, valueChange=True)[0]
                        in_tangent = cmds.keyTangent(target_attr, time=(key_time,), query=True, inTangentType=True)[0]
                        out_tangent = cmds.keyTangent(target_attr, time=(key_time,), query=True, outTangentType=True)[0]
                        
                        # Calculate where this key should go at the beginning
                        # Wrap it around to the start of timeline
                        offset_from_end = key_time - end_time
                        new_time = start_time + offset_from_end
                        
                        # Only move if the new position doesn't conflict with existing keys
                        if new_time <= end_time:
                            # Remove the old key
                            cmds.cutKey(target_attr, time=(key_time, key_time))
                            
                            # Set new key at wrapped position
                            cmds.setKeyframe(target_attr, time=new_time, value=key_value)
                            
                            # Restore tangent types
                            cmds.keyTangent(target_attr, time=(new_time,), edit=True,
                                          inTangentType=in_tangent, outTangentType=out_tangent)
                            
                            print(f"DEBUG: Wrapped key from {key_time:.1f} to {new_time:.1f}")
                
                if keys_before_start:
                    # Move keys that are before the start to the end
                    for key_time in keys_before_start:
                        # Get the key's value and tangent info
                        key_value = cmds.keyframe(target_attr, time=(key_time,), query=True, valueChange=True)[0]
                        in_tangent = cmds.keyTangent(target_attr, time=(key_time,), query=True, inTangentType=True)[0]
                        out_tangent = cmds.keyTangent(target_attr, time=(key_time,), query=True, outTangentType=True)[0]
                        
                        # Calculate where this key should go at the end
                        offset_from_start = start_time - key_time
                        new_time = end_time - offset_from_start
                        
                        # Only move if the new position doesn't conflict with existing keys
                        if new_time >= start_time:
                            # Remove the old key
                            cmds.cutKey(target_attr, time=(key_time, key_time))
                            
                            # Set new key at wrapped position
                            cmds.setKeyframe(target_attr, time=new_time, value=key_value)
                            
                            # Restore tangent types
                            cmds.keyTangent(target_attr, time=(new_time,), edit=True,
                                          inTangentType=in_tangent, outTangentType=out_tangent)
                            
                            print(f"DEBUG: Wrapped key from {key_time:.1f} to {new_time:.1f}")
                
                print(f"DEBUG: Timeline fitting completed - keys now wrapped within [{start_time}, {end_time}]")
                
                # Ensure cycle infinity is maintained after the reorganization
                self._apply_cycle_infinity(target_attr)
                
        except Exception as e:
            print(f"DEBUG: Timeline fitting failed for {target_attr}: {e}")
            
    def _normalize_curves_to_timeline(self, control_name, keyed_attrs):
        """Shift source curves to start at timeline beginning without changing shape."""
        try:
            # Get current timeline range
            start_time = cmds.playbackOptions(query=True, minTime=True)
            end_time = cmds.playbackOptions(query=True, maxTime=True)
            
            for attr in keyed_attrs:
                source_attr = f"{control_name}.{attr}"
                
                # Get current keyframes
                keyframes = cmds.keyframe(source_attr, query=True, timeChange=True)
                if not keyframes or len(keyframes) < 2:
                    continue
                    
                keyframes = sorted(keyframes)
                first_key_time = keyframes[0]
                last_key_time = keyframes[-1]
                
                # Check if ANY keys are outside the timeline range (not just first key)
                keys_outside = any(k < start_time or k > end_time for k in keyframes)
                
                if keys_outside or abs(first_key_time - start_time) > 0.001:
                    print(f"DEBUG: Keys outside timeline detected for {source_attr}")
                    print(f"DEBUG: Current range [{first_key_time:.1f}, {last_key_time:.1f}], timeline [{start_time}, {end_time}]")
                    
                    # Simple shift: move all keyframes so first key is at timeline start
                    time_shift = start_time - first_key_time
                    
                    print(f"DEBUG: Applying time shift {time_shift:.1f} to {source_attr}")
                    
                    # Apply time shift - this preserves exact curve shape and timing
                    cmds.keyframe(source_attr, edit=True, timeChange=time_shift, relative=True)
                    
                    # Verify the shift worked
                    new_keyframes = cmds.keyframe(source_attr, query=True, timeChange=True)
                    if new_keyframes:
                        new_first = min(new_keyframes)
                        new_last = max(new_keyframes)
                        print(f"DEBUG: After shift - curve spans [{new_first:.1f}, {new_last:.1f}]")
                        
                        # Double-check if there are still keys outside timeline
                        still_outside = any(k < start_time - 0.001 or k > end_time + 0.001 for k in new_keyframes)
                        if still_outside:
                            print(f"WARNING: Some keys still outside timeline after shift!")
                        else:
                            print(f"SUCCESS: All keys now within timeline range")
                    
                    # Ensure cycle infinity is maintained
                    self._apply_cycle_infinity(source_attr)
                else:
                    print(f"DEBUG: {source_attr} already within timeline range - no shift needed")
                    
        except Exception as e:
            print(f"DEBUG: Curve normalization failed for {control_name}: {e}")
        
    def _handle_attribute_lock(self, attr, unlock=False, lock=False):
        """Handle locking/unlocking of attributes. Returns True if attribute was locked."""
        try:
            is_locked = cmds.getAttr(attr, lock=True)
            if unlock and is_locked:
                cmds.setAttr(attr, lock=False)
                return True
            elif lock:
                cmds.setAttr(attr, lock=True)
        except Exception:
            pass
        return False
        
    def _clear_existing_keys(self, target_attr):
        """Clear all existing keyframes from the target attribute to ensure complete replacement."""
        try:
            # Check if attribute has keyframes
            if cmds.keyframe(target_attr, query=True, keyframeCount=True):
                cmds.cutKey(target_attr, clear=True)
        except Exception:
            # Attribute might not have keys or might not exist
            pass
    
    def _paste_keys_with_fallback(self, target_attr):
        """Paste keys with fallback options."""
        # Clear existing keys first to ensure complete replacement
        self._clear_existing_keys(target_attr)
        
        paste_opts = self.get_key_options()
        
        # Primary paste attempt
        try:
            cmds.pasteKey(target_attr, **paste_opts)
            cmds.refresh()  # Allow Maya to process
            return True
        except Exception as e:
            cmds.warning(f"pasteKey failed on {target_attr}: {e}")
            
        # Fallback paste attempt
        try:
            cmds.pasteKey(target_attr, option='replaceCompletely')
            cmds.refresh()
            return True
        except Exception as e2:
            cmds.warning(f"pasteKey fallback failed on {target_attr}: {e2}")
            return False
            
    def _apply_post_processing(self, target_attr, attr, source_ctrl, target_ctrl, source_curve):
        """Apply X-axis inversion and infinity settings after key paste."""
        # Apply auto-inversion for translateX
        if self.auto_detect_x_inversion and attr == 'translateX':
            self._apply_auto_x_inversion(target_attr, source_ctrl, target_ctrl)
            
        # Apply infinity settings
        self._apply_infinity_to_target(target_attr, source_curve)
        
    def _apply_auto_x_inversion(self, target_attr, source_ctrl, target_ctrl):
        """Apply automatic X-axis inversion if needed."""
        try:
            # Check if this is a left<->right pair
            source_is_left = self.is_left(source_ctrl)
            source_is_right = self.is_right(source_ctrl)
            target_is_left = self.is_left(target_ctrl)
            target_is_right = self.is_right(target_ctrl)
            
            if not ((source_is_left and target_is_right) or (source_is_right and target_is_left)):
                return  # Not a left<->right pair
                
            # Detect and apply inversion if needed
            inversion_needed = self.detect_x_inversion_needed(source_ctrl, target_ctrl)
            if inversion_needed:
                cmds.scaleKey(target_attr, valueScale=-1.0)
                print(f"Applied X-axis inversion to {target_attr}")
            else:
                print(f"No X-axis inversion needed for {target_attr}")
                
        except Exception as e:
            cmds.warning(f"Auto-inversion detection failed for {target_attr}: {e}")
            
    def _apply_infinity_to_target(self, target_attr, source_curve):
        """Apply infinity settings and tangent smoothing to target attribute curves."""
        target_curves = self._find_target_curves(target_attr)
        if not target_curves:
            print(f"DEBUG: WARNING - No curves found for {target_attr}")
            return
            
        # Force cycle infinity is now always enabled by default
        force_cycle = True
            
        if force_cycle:
            self._apply_cycle_infinity_mel(target_curves)
        else:
            for target_curve in target_curves:
                self._apply_infinity_from_source(source_curve, target_curve)
        
        # Apply tangent smoothing for seamless cycling
        self._apply_tangent_smoothing_to_curves(target_curves)
    
    def _apply_tangent_smoothing_to_curves(self, curves):
        """Apply tangent smoothing to curves using their full time range."""
        if not curves:
            return
            
        for curve in curves:
            if not curve or not cmds.objExists(curve):
                continue
                
            try:
                # Get the full time range of this curve
                key_times = cmds.keyframe(curve, query=True, timeChange=True) or []
                if len(key_times) < 2:
                    continue
                    
                start_time = min(key_times)
                end_time = max(key_times)
                
                # Apply smooth cycle tangents
                self._ensure_smooth_cycle_tangents([curve], start_time, end_time)
                
            except Exception as e:
                print(f"DEBUG: Error applying tangent smoothing to {curve}: {e}")
                
    def _find_target_curves(self, target_attr):
        """Find animation curves connected to target attribute using multiple methods."""
        # Method 1: keyframe query
        try:
            curves = cmds.keyframe(target_attr, query=True, name=True) or []
            if curves:
                return curves
        except Exception:
            pass
            
        # Method 2: listConnections with animCurve type filter
        try:
            conns = cmds.listConnections(target_attr, source=True, destination=False, type='animCurve') or []
            curves = [c for c in conns if c and cmds.objExists(c) and cmds.nodeType(c).startswith('animCurve')]
            if curves:
                return curves
        except Exception:
            pass
            
        # Method 3: General listConnections and filter
        try:
            all_conns = cmds.listConnections(target_attr, source=True, destination=False) or []
            curves = []
            for conn in all_conns:
                if conn and cmds.objExists(conn):
                    try:
                        if cmds.nodeType(conn).startswith('animCurve'):
                            curves.append(conn)
                    except Exception:
                        continue
            return curves
        except Exception:
            pass
            
        return []

    # =========================================================================
    # SECTION 7: COPY OPERATIONS
    # =========================================================================

    def copy_left_to_right(self, *_):
        """Copy animation from left controls to right controls using per-control settings."""
        if not self.left_controls or not self.right_controls:
            cmds.warning("Left or Right list is empty. Please add paired controls first.")
            return

        count = min(len(self.left_controls), len(self.right_controls))
        if len(self.left_controls) != len(self.right_controls):
            cmds.warning(f"Left/Right list lengths differ (L={len(self.left_controls)} R={len(self.right_controls)}). Using first {count} pairs.")

        for i in range(count):
            left_ctrl = self.left_controls[i]
            right_ctrl = self.right_controls[i] if i < len(self.right_controls) and self.right_controls[i] else self.get_other_side(left_ctrl, left_to_right=True)
            if left_ctrl == right_ctrl:
                cmds.warning(f"Skipping pair with identical names: {left_ctrl}")
                continue
            
            # Get per-control settings
            offset = self.control_offsets[i] if i < len(self.control_offsets) else 0
            inversion = self.control_inversions[i] if i < len(self.control_inversions) else {}
            
            # Copy with per-control settings
            self._copy_with_per_control_settings(left_ctrl, right_ctrl, offset, inversion)

    def copy_right_to_left(self, *_):
        """Copy animation from right controls to left controls using per-control settings."""
        if not self.left_controls or not self.right_controls:
            cmds.warning("Left or Right list is empty. Please add paired controls first.")
            return

        count = min(len(self.left_controls), len(self.right_controls))
        if len(self.left_controls) != len(self.right_controls):
            cmds.warning(f"Left/Right list lengths differ (L={len(self.left_controls)} R={len(self.right_controls)}). Using first {count} pairs.")

        for i in range(count):
            right_ctrl = self.right_controls[i]
            left_ctrl = self.left_controls[i] if i < len(self.left_controls) and self.left_controls[i] else self.get_other_side(right_ctrl, left_to_right=False)
            if right_ctrl == left_ctrl:
                cmds.warning(f"Skipping pair with identical names: {right_ctrl}")
                continue
            
            # Get per-control settings
            offset = self.control_offsets[i] if i < len(self.control_offsets) else 0
            inversion = self.control_inversions[i] if i < len(self.control_inversions) else {}
            
            # Copy with per-control settings
            self._copy_with_per_control_settings(right_ctrl, left_ctrl, offset, inversion)
    
    def _copy_with_per_control_settings(self, source_ctrl, target_ctrl, time_offset, inversion_settings):
        """Copy animation using per-control offset and inversion settings."""
        # Get full control names with prefix
        prefix = cmds.textField(self.prefix_field, query=True, text=True)
        source_full = f"{prefix}{source_ctrl}" if not source_ctrl.startswith(prefix) else source_ctrl
        target_full = f"{prefix}{target_ctrl}" if not target_ctrl.startswith(prefix) else target_ctrl

        if not (cmds.objExists(source_full) and cmds.objExists(target_full)):
            cmds.warning(f"Control not found: {source_full} or {target_full}")
            return

        # Get keyed attributes first
        source_keyed_attrs = self._keyed_attributes(source_full)
        
        # If no keyed attributes, copy current values
        if not source_keyed_attrs:
            self._copy_current_values_with_inversion(source_full, target_full, inversion_settings)
            return

        # First normalize source curves to fit timeline range
        print(f"DEBUG: Normalizing source curves for {source_full}")
        self._normalize_curves_to_timeline(source_full, source_keyed_attrs)

        # Copy keyed animation
        for attr in source_keyed_attrs:
            source_attr = f"{source_full}.{attr}"
            target_attr = f"{target_full}.{attr}"

            if not self._target_has_attribute(target_full, attr):
                continue

            source_curve = self._anim_curve_for_attr(source_attr)
            if not source_curve:
                continue

            # Copy keys with offset - ensure complete replacement
            if self._copy_and_paste_keys_with_offset(source_attr, target_attr, source_curve, time_offset, 0.0):
                # Apply per-control inversion settings with auto-detection
                if self._should_invert_attribute(attr, inversion_settings, source_full, target_full):
                    cmds.scaleKey(target_attr, valueScale=-1.0)
                
                # Apply successful tangent smoothing and cycle infinity
                print(f"DEBUG Lâ†’R: Applying tangent smoothing to {target_attr}")
                self._smooth_cycle_transitions(target_attr)
                self._apply_cycle_infinity(target_attr)
                
                # Timeline fitting disabled - cycle infinity handles offset curves properly
                # Keyframes can extend beyond timeline when using cycle infinity
    
    def _copy_current_values_with_inversion(self, source_ctrl, target_ctrl, inversion_settings):
        """Copy current channel values with per-control inversion settings."""
        attrs_to_copy = ['translateX', 'translateY', 'translateZ', 
                        'rotateX', 'rotateY', 'rotateZ',
                        'scaleX', 'scaleY', 'scaleZ']
        
        for attr in attrs_to_copy:
            source_attr = f"{source_ctrl}.{attr}"
            target_attr = f"{target_ctrl}.{attr}"
            
            # Check if both controls have this attribute
            if (self._target_has_attribute(source_ctrl, attr) and 
                self._target_has_attribute(target_ctrl, attr)):
                
                try:
                    # Get current value from source
                    current_value = cmds.getAttr(source_attr)
                    
                    # Apply inversion if set for this attribute or auto-detected
                    final_value = current_value
                    if self._should_invert_attribute(attr, inversion_settings, source_ctrl, target_ctrl):
                        final_value = -final_value
                    
                    # Handle locked attributes
                    relock = self._handle_attribute_lock(target_attr, unlock=True) 
                    
                    # Set the value on target
                    cmds.setAttr(target_attr, final_value)
                    
                    # Restore lock state
                    if relock:
                        self._handle_attribute_lock(target_attr, lock=True)
                        
                except Exception as e:
                    cmds.warning(f"Failed to copy current value for {attr}: {e}")
    
    def _should_invert_attribute(self, attr, inversion_settings, source_ctrl=None, target_ctrl=None):
        """Check if an attribute should be inverted based on per-control settings or auto-detection."""
        attr_map = {
            'translateX': 'tx', 'translateY': 'ty', 'translateZ': 'tz',
            'rotateX': 'rx', 'rotateY': 'ry', 'rotateZ': 'rz'
        }
        
        inversion_key = attr_map.get(attr)
        if not inversion_key:
            return False
            
        # If manual settings exist, use them (they override auto-detection)
        if inversion_settings and inversion_key in inversion_settings:
            return inversion_settings.get(inversion_key, False)
        
        # Auto-detect axis convention if enabled and controls are provided
        if (source_ctrl and target_ctrl and 
            hasattr(self, 'auto_detect_checkbox') and 
            cmds.checkBox(self.auto_detect_checkbox, query=True, value=True)):
            return self._auto_detect_inversion_needed(source_ctrl, target_ctrl, attr)
            
        return False
    
    def _auto_detect_inversion_needed(self, source_ctrl, target_ctrl, attr):
        """
        Automatically detect if inversion is needed by analyzing existing animation data.
        
        Args:
            source_ctrl: Source control name (with full prefix)
            target_ctrl: Target control name (with full prefix) 
            attr: Attribute name (translateX, rotateY, etc.)
            
        Returns:
            bool: True if inversion is needed, False otherwise
        """
        try:
            # Get animation curves for both controls
            source_attr = f"{source_ctrl}.{attr}"
            target_attr = f"{target_ctrl}.{attr}"
            
            source_curve = self._anim_curve_for_attr(source_attr)
            target_curve = self._anim_curve_for_attr(target_attr)
            
            # If either control has no animation, use anatomical defaults
            if not source_curve or not target_curve:
                return self._get_anatomical_inversion_default(attr, source_ctrl, target_ctrl)
            
            # Analyze correlation between source and target animation
            correlation = self._analyze_animation_correlation(source_curve, target_curve)
            
            # Positive correlation = same direction movement (need inversion)
            # Negative correlation = opposite direction movement (no inversion needed)
            inversion_needed = correlation > 0.1  # Small threshold to handle noise
            
            # Visual feedback for user
            source_short = source_ctrl.split(':')[-1] if ':' in source_ctrl else source_ctrl
            target_short = target_ctrl.split(':')[-1] if ':' in target_ctrl else target_ctrl
            action = "INVERTING" if inversion_needed else "SAME DIR"
            print(f"ðŸ¤– Auto-detect {attr}: {source_short}â†’{target_short} ({action}, correlation={correlation:.2f})")
            return inversion_needed
            
        except Exception as e:
            print(f"Auto-detection failed for {attr}: {e}")
            return self._get_anatomical_inversion_default(attr, source_ctrl, target_ctrl)
    
    def _analyze_animation_correlation(self, source_curve, target_curve):
        """
        Analyze the correlation between two animation curves to determine movement relationship.
        
        Returns:
            float: Correlation coefficient (-1 to 1)
                   +1 = perfect positive correlation (same direction)
                   -1 = perfect negative correlation (opposite direction)
                    0 = no correlation
        """
        try:
            # Get time range from both curves
            source_times = self._get_curve_key_times(source_curve)
            target_times = self._get_curve_key_times(target_curve)
            
            if not source_times or not target_times:
                return 0.0
            
            # Sample both curves at regular intervals
            min_time = max(min(source_times), min(target_times))
            max_time = min(max(source_times), max(target_times))
            
            if max_time <= min_time:
                return 0.0
            
            # Sample at 10 points across the overlap
            sample_count = min(10, len(source_times), len(target_times))
            sample_times = [min_time + i * (max_time - min_time) / (sample_count - 1) 
                           for i in range(sample_count)]
            
            source_values = []
            target_values = []
            
            for time in sample_times:
                source_val = cmds.keyframe(source_curve, query=True, time=(time, time), valueChange=True)
                target_val = cmds.keyframe(target_curve, query=True, time=(time, time), valueChange=True)
                
                if source_val and target_val:
                    source_values.append(source_val[0])
                    target_values.append(target_val[0])
            
            if len(source_values) < 3:  # Need at least 3 points for meaningful correlation
                return 0.0
            
            # Calculate Pearson correlation coefficient
            return self._calculate_correlation(source_values, target_values)
            
        except Exception as e:
            print(f"Correlation analysis failed: {e}")
            return 0.0
    
    def _calculate_correlation(self, x_values, y_values):
        """Calculate Pearson correlation coefficient between two value lists."""
        if len(x_values) != len(y_values) or len(x_values) < 2:
            return 0.0
        
        n = len(x_values)
        sum_x = sum(x_values)
        sum_y = sum(y_values)
        sum_xy = sum(x * y for x, y in zip(x_values, y_values))
        sum_x2 = sum(x * x for x in x_values)
        sum_y2 = sum(y * y for y in y_values)
        
        numerator = n * sum_xy - sum_x * sum_y
        denominator = ((n * sum_x2 - sum_x * sum_x) * (n * sum_y2 - sum_y * sum_y)) ** 0.5
        
        if denominator == 0:
            return 0.0
        
        return numerator / denominator
    
    def _get_curve_key_times(self, curve):
        """Get all key times from an animation curve."""
        try:
            return cmds.keyframe(curve, query=True, timeChange=True) or []
        except:
            return []
    
    def _get_anatomical_inversion_default(self, attr, source_ctrl, target_ctrl):
        """
        Get anatomical default inversion based on attribute and control names.
        This is used as fallback when no animation data is available.
        """
        # Conservative defaults - no inversions by default
        # Let animation analysis or manual settings drive inversion decisions
        anatomical_defaults = {
            'translateX': False,  # No inversion by default
            'translateY': False,  # No inversion by default
            'translateZ': False,  # No inversion by default
            'rotateX': False,     # No inversion by default
            'rotateY': False,     # No inversion by default
            'rotateZ': False      # No inversion by default
        }
        
        # Check for special control types that might have different conventions
        source_lower = source_ctrl.lower()
        
        # Eyes often have different conventions
        if any(eye_part in source_lower for eye_part in ['eye', 'look', 'gaze']):
            if attr in ['rotateX', 'rotateY']:
                return False  # Eye controls often don't need rotation mirroring
        
        # Fingers and toes often follow anatomical patterns
        if any(digit in source_lower for digit in ['finger', 'thumb', 'toe']):
            if attr == 'rotateY':
                return False  # Finger curling usually same direction
        
        return anatomical_defaults.get(attr, False)
    
    def test_axis_detection(self, *_):
        """Test the auto-detection system on current control pairs and display results."""
        if not self.left_controls or not self.right_controls:
            cmds.warning("Please add some left/right control pairs first.")
            return
        
        prefix = cmds.textField(self.prefix_field, query=True, text=True)
        results = []
        
        # Test first few pairs
        test_count = min(3, len(self.left_controls), len(self.right_controls))
        
        for i in range(test_count):
            left_ctrl = self.left_controls[i]
            right_ctrl = self.right_controls[i]
            
            left_full = f"{prefix}{left_ctrl}" if not left_ctrl.startswith(prefix) else left_ctrl
            right_full = f"{prefix}{right_ctrl}" if not right_ctrl.startswith(prefix) else right_ctrl
            
            if not (cmds.objExists(left_full) and cmds.objExists(right_full)):
                continue
            
            results.append(f"\n=== {left_ctrl} â†’ {right_ctrl} ===")
            
            # Test each attribute
            for attr in ['translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ']:
                invert_needed = self._auto_detect_inversion_needed(left_full, right_full, attr)
                status = "INVERT" if invert_needed else "SAME"
                results.append(f"  {attr}: {status}")
        
        if results:
            message = ("Auto-Detection Preview Results:\n" +
                      "(These are NOT applied yet - use 'Apply Detection' to apply them)" + 
                      "".join(results))
            cmds.confirmDialog(title="Axis Convention Detection Preview", 
                             message=message, 
                             button=['OK'])
        else:
            cmds.warning("No valid control pairs found for testing.")
    
    def apply_axis_detection(self, *_):
        """Apply auto-detection results to the inversion checkboxes for all control pairs."""
        if not self.left_controls or not self.right_controls:
            cmds.warning("Please add some left/right control pairs first.")
            return
        
        prefix = cmds.textField(self.prefix_field, query=True, text=True)
        applied_count = 0
        
        # Apply detection to all pairs
        pair_count = min(len(self.left_controls), len(self.right_controls))
        
        for i in range(pair_count):
            left_ctrl = self.left_controls[i]
            right_ctrl = self.right_controls[i]
            
            left_full = f"{prefix}{left_ctrl}" if not left_ctrl.startswith(prefix) else left_ctrl
            right_full = f"{prefix}{right_ctrl}" if not right_ctrl.startswith(prefix) else right_ctrl
            
            if not (cmds.objExists(left_full) and cmds.objExists(right_full)):
                continue
            
            # Detect inversion for each attribute and update the data
            attr_map = {
                'translateX': 'tx', 'translateY': 'ty', 'translateZ': 'tz',
                'rotateX': 'rx', 'rotateY': 'ry', 'rotateZ': 'rz'
            }
            
            for attr, key in attr_map.items():
                invert_needed = self._auto_detect_inversion_needed(left_full, right_full, attr)
                if i < len(self.control_inversions):
                    self.control_inversions[i][key] = invert_needed
            
            applied_count += 1
        
        # Refresh the UI to show updated checkboxes
        self._refresh_control_pairs_ui()
        
        if applied_count > 0:
            cmds.confirmDialog(title="Auto-Detection Applied", 
                             message=f"Applied auto-detection to {applied_count} control pairs.\n\n"
                                   f"The inversion checkboxes have been updated based on\n"
                                   f"analysis of existing animation data.\n\n"
                                   f"Manual changes to checkboxes will override these settings.",
                             button=['OK'])
            print(f"ðŸ¤– Applied auto-detection to {applied_count} control pairs")
        else:
            cmds.warning("No valid control pairs found for auto-detection.")

    # =========================================================================
    # SECTION 4: X-AXIS INVERSION DETECTION SYSTEM
    # =========================================================================

    def detect_x_inversion_needed(self, left_ctrl, right_ctrl, verbose=False):
        """
        Analyze existing animation on left/right control pair to determine if X-axis inversion is needed.
        
        Returns:
            bool: True if X-axis values should be inverted when copying, False if they should stay the same
            
        Logic:
        - If left moves +X and right moves +X at the same time -> need inversion (opposite rig convention)
        - If left moves +X and right moves -X at the same time -> no inversion needed (mirrored rig convention)
        """

        
        prefix = cmds.textField(self.prefix_field, query=True, text=True)
        left_full = f"{prefix}{left_ctrl}" if not left_ctrl.startswith(prefix) else left_ctrl
        right_full = f"{prefix}{right_ctrl}" if not right_ctrl.startswith(prefix) else right_ctrl
        
        if not (cmds.objExists(left_full) and cmds.objExists(right_full)):
            if verbose:
                print(f"Controls don't exist: {left_full} or {right_full}")
            return False
        
        # Analyze translateX patterns
        inversion_needed = self._analyze_translate_x_patterns(left_full, right_full, verbose)
        
        # If translateX analysis is inconclusive, try rotation analysis
        if inversion_needed is None:
            inversion_needed = self._analyze_rotation_patterns(left_full, right_full, verbose)
        
        # Default to False if still inconclusive
        if inversion_needed is None:
            inversion_needed = False
            if verbose:
                print(f"Analysis inconclusive for {left_ctrl}<->{right_ctrl}, defaulting to no inversion")
        
        if verbose:
            print(f"X-inversion analysis for {left_ctrl}<->{right_ctrl}: {'INVERT' if inversion_needed else 'NO INVERSION'}")
        
        return inversion_needed
    
    def _analyze_translate_x_patterns(self, left_full, right_full, verbose=False):
        """Analyze translateX animation patterns to detect inversion needs."""
        left_tx_attr = f"{left_full}.translateX"
        right_tx_attr = f"{right_full}.translateX"
        
        # Get animation curves for translateX
        left_curve = self._anim_curve_for_attr(left_tx_attr)
        right_curve = self._anim_curve_for_attr(right_tx_attr)
        
        if not (left_curve and right_curve):
            if verbose:
                print(f"Missing translateX animation: L={bool(left_curve)} R={bool(right_curve)}")
            return None
        
        # Get keyframe times that exist on both curves
        try:
            left_times = set(cmds.keyframe(left_curve, query=True, timeChange=True) or [])
            right_times = set(cmds.keyframe(right_curve, query=True, timeChange=True) or [])
            common_times = sorted(left_times.intersection(right_times))
            
            if len(common_times) < 2:
                if verbose:
                    print(f"Not enough common keyframes for analysis: {len(common_times)}")
                return None
            
            # Sample values at common times
            correlation_samples = []
            for time in common_times[:10]:  # Limit to first 10 samples for performance
                try:
                    left_val = cmds.getAttr(left_tx_attr, time=time)
                    right_val = cmds.getAttr(right_tx_attr, time=time)
                    correlation_samples.append((left_val, right_val))
                except Exception:
                    continue
            
            if len(correlation_samples) < 2:
                if verbose:
                    print("Not enough valid samples for correlation analysis")
                return None
            
            # Calculate correlation direction
            # If left and right move in same direction -> need inversion
            # If left and right move in opposite directions -> no inversion needed
            same_direction_count = 0
            opposite_direction_count = 0
            
            for i in range(1, len(correlation_samples)):
                left_prev, right_prev = correlation_samples[i-1]
                left_curr, right_curr = correlation_samples[i]
                
                left_delta = left_curr - left_prev
                right_delta = right_curr - right_prev
                
                # Skip if no significant movement
                if abs(left_delta) < 0.001 and abs(right_delta) < 0.001:
                    continue
                
                # Check if movements are in same direction or opposite
                if (left_delta > 0 and right_delta > 0) or (left_delta < 0 and right_delta < 0):
                    same_direction_count += 1
                elif (left_delta > 0 and right_delta < 0) or (left_delta < 0 and right_delta > 0):
                    opposite_direction_count += 1
            
            if verbose:
                print(f"TranslateX analysis: Same direction={same_direction_count}, Opposite direction={opposite_direction_count}")
            
            # Determine result based on predominant pattern
            if same_direction_count > opposite_direction_count:
                return True  # Need inversion - they move the same way but should be mirrored
            elif opposite_direction_count > same_direction_count:
                return False  # No inversion - already mirrored correctly
            else:
                return None  # Inconclusive
                
        except Exception as e:
            if verbose:
                print(f"Error in translateX analysis: {e}")
            return None
    
    def _analyze_rotation_patterns(self, left_full, right_full, verbose=False):
        """Analyze rotation patterns as fallback to translateX analysis."""
        # Check rotateY patterns (often the most telling for left/right differences)
        left_ry_attr = f"{left_full}.rotateY"
        right_ry_attr = f"{right_full}.rotateY"
        
        left_curve = self._anim_curve_for_attr(left_ry_attr)
        right_curve = self._anim_curve_for_attr(right_ry_attr)
        
        if not (left_curve and right_curve):
            if verbose:
                print(f"Missing rotateY animation: L={bool(left_curve)} R={bool(right_curve)}")
            return None
        
        try:
            # Get average values over time
            left_times = cmds.keyframe(left_curve, query=True, timeChange=True) or []
            right_times = cmds.keyframe(right_curve, query=True, timeChange=True) or []
            
            # Sample a few values
            left_samples = []
            right_samples = []
            
            for time in left_times[:5]:
                try:
                    left_samples.append(cmds.getAttr(left_ry_attr, time=time))
                except Exception:
                    pass
            
            for time in right_times[:5]:
                try:
                    right_samples.append(cmds.getAttr(right_ry_attr, time=time))
                except Exception:
                    pass
            
            if not (left_samples and right_samples):
                return None
            
            left_avg = sum(left_samples) / len(left_samples)
            right_avg = sum(right_samples) / len(right_samples)
            
            if verbose:
                print(f"RotateY averages: L={left_avg:.3f}, R={right_avg:.3f}")
            
            # If rotations have same sign, they might need inversion
            # This is a heuristic - not foolproof
            if (left_avg > 0 and right_avg > 0) or (left_avg < 0 and right_avg < 0):
                return True  # Likely need inversion
            else:
                return False  # Likely already mirrored
                
        except Exception as e:
            if verbose:
                print(f"Error in rotation analysis: {e}")
            return None
    
    def analyze_all_control_pairs(self, verbose=False):
        """Analyze all current left/right control pairs for inversion detection."""
        if not self.left_controls or not self.right_controls:
            cmds.warning("No control pairs to analyze")
            return
        
        results = {}
        count = min(len(self.left_controls), len(self.right_controls))
        
        print(f"Analyzing {count} control pairs for X-axis inversion needs...")
        
        for i in range(count):
            left_ctrl = self.left_controls[i]
            right_ctrl = self.right_controls[i] if i < len(self.right_controls) else self.get_other_side(left_ctrl, True)
            
            if left_ctrl and right_ctrl:
                inversion_needed = self.detect_x_inversion_needed(left_ctrl, right_ctrl, verbose)
                results[f"{left_ctrl}<->{right_ctrl}"] = inversion_needed
        
        # Summary
        invert_count = sum(1 for need_invert in results.values() if need_invert)
        no_invert_count = len(results) - invert_count
        
        print(f"Analysis complete: {invert_count} pairs need inversion, {no_invert_count} pairs don't")
        
        if verbose:
            for pair, needs_invert in results.items():
                print(f"  {pair}: {'INVERT' if needs_invert else 'NO INVERSION'}")
        
        return results

    # =========================================================================
    # SECTION 9: UI CALLBACKS & HELPERS
    # =========================================================================



    # =========================================================================
    # SECTION 2: CONTROL MANAGEMENT (continued)
    # =========================================================================

    def load_biped_defaults(self, *_):
        lefts = ["L_leg_CTL", "L_arm_CTL", "L_foot_CTL", "L_hand_CTL", "L_clavicle_CTL"]
        self.left_controls = lefts
        self.right_controls = [self.get_other_side(l, left_to_right=True) for l in lefts]
        cmds.textScrollList(self.left_list_field, edit=True, removeAll=True)
        cmds.textScrollList(self.right_list_field, edit=True, removeAll=True)
        for l, r in zip(self.left_controls, self.right_controls):
            cmds.textScrollList(self.left_list_field, edit=True, append=l)
            cmds.textScrollList(self.right_list_field, edit=True, append=r)

    def load_quad_defaults(self, *_):
        lefts = [
            "L_ikFrontLegHandle_CTL", "L_frontClavicle_CTL", "L_frontFootToe_CTL", "L_frontFootReverseRollBall_CTL",
            "L_frontFootIndex01_CTL", "L_frontFootIndex02_CTL", "L_frontFootMiddle01_CTL", "L_frontFootMiddle02_CTL",
            "L_frontFootRing01_CTL", "L_frontFootRing02_CTL", "L_frontFootPinky01_CTL", "L_frontFootPinky02_CTL"
        ]
        self.left_controls = lefts
        self.right_controls = [self.get_other_side(l, left_to_right=True) for l in lefts]
        cmds.textScrollList(self.left_list_field, edit=True, removeAll=True)
        cmds.textScrollList(self.right_list_field, edit=True, removeAll=True)
        for l, r in zip(self.left_controls, self.right_controls):
            cmds.textScrollList(self.left_list_field, edit=True, append=l)
            cmds.textScrollList(self.right_list_field, edit=True, append=r)

    # ---------------------
    # Actions: Spine inversion pass
    # ---------------------

    def invert_spine_channels(self, *_):
        """
        Enforce half-cycle antiphase or standard cycle on spine/centerline channels over the playback range.
        - rotateY, rotateZ, translateX, translateZ: antiphase (second half = negative of first half)
        - rotateX, translateY: standard cycle (second half = copy of first half)
        """
        sel = cmds.ls(selection=True) or []
        if not sel:
            cmds.warning("Select one or more controls to invert spine channels.")
            return
        spine_controls = self._get_spine_controls()
        if not spine_controls:
            cmds.warning("No spine controls defined. Add controls to the Spine Controls list first.")
            return
            
        try:
            invert_y = cmds.checkBox(self.invert_y_chk, query=True, value=True)
            invert_z = cmds.checkBox(self.invert_z_chk, query=True, value=True)
        except Exception:
            invert_y = self.spine_invert_y_default
            invert_z = self.spine_invert_z_default

        start, end, mid = self._playback_cycle_range()
        if end <= start:
            cmds.warning("Invalid playback range. Set a valid range (e.g., 0 to 40).")
            return

        # Define which channels get which type of cycling
        antiphase_attrs = []
        if invert_y:
            antiphase_attrs.append("rotateY")
        if invert_z:
            antiphase_attrs.append("rotateZ")
        antiphase_attrs += ["translateX"]
        standard_attrs = ["rotateX", "translateY", "translateZ"]

        count = 0
        for node in sel:
            if node not in spine_controls:
                continue
            # Antiphase channels
            for attr in antiphase_attrs:
                plug = f"{node}.{attr}"
                try:
                    if not cmds.objExists(plug):
                        continue
                except Exception:
                    continue
                if not self._anim_curve_for_attr(plug):
                    continue
                self._rebuild_second_half_antiphase(plug, start, mid, end)
                count += 1
            # Standard cycle channels
            for attr in standard_attrs:
                plug = f"{node}.{attr}"
                try:
                    if not cmds.objExists(plug):
                        continue
                except Exception:
                    continue
                if not self._anim_curve_for_attr(plug):
                    continue
                self._rebuild_second_half_standard(plug, start, mid, end)
                count += 1

        if count == 0:
            cmds.warning("No matching spine channels processed. Check selection, spine controls list, and playback range.")
        else:
            cmds.inViewMessage(amg=f"Applied cycle/antiphase to {count} channel(s) over [{start:.0f},{end:.0f}]", pos='midCenter', fade=True)

    def _rebuild_second_half_standard(self, plug, start, mid, end):
        """
        Make [mid,end] a standard cycle (copy of [start,mid]) for the given plug.
        """
        # Anchor values
        try:
            v_start = cmds.getAttr(plug, time=start)
        except Exception:
            v_start = None
        if not self._has_key_at(plug, start):
            self._ensure_key(plug, start, v_start)
        if not self._has_key_at(plug, mid):
            self._ensure_key(plug, mid, v_start if v_start is not None else None)

        # Unlock if needed
        relock = False
        try:
            if cmds.getAttr(plug, lock=True):
                relock = True
                cmds.setAttr(plug, lock=False)
        except Exception:
            pass

        # Clear second half
        try:
            cmds.cutKey(plug, time=(mid, end))
        except Exception:
            pass

        # Copy first half [start, mid) and paste to [mid, end)
        try:
            cmds.copyKey(plug, time=(start, mid), includeUpperBound=False)
        except Exception as e:
            cmds.warning(f"copyKey failed on {plug} [{start},{mid}): {e}")
            return
        try:
            cmds.pasteKey(plug, option='merge', timeOffset=(mid - start))
        except Exception as e:
            try:
                cmds.pasteKey(plug, option='merge')
            except Exception as e2:
                cmds.warning(f"pasteKey failed on {plug}: {e2}")
                return

        # Enforce anchors: end==start, mid==start
        try:
            if v_start is None:
                v_start = cmds.getAttr(plug, time=start)
        except Exception:
            v_start = 0.0
        self._ensure_key(plug, mid, float(v_start))
        self._ensure_key(plug, end, float(v_start))

        # Apply tangent smoothing for spine standard cycles
        self._smooth_spine_transitions(plug, start, mid, end, is_antiphase=False)
        
        # Apply cycle infinity for seamless looping
        self._apply_cycle_infinity(plug)

        # Relock
        if relock:
            try:
                cmds.setAttr(plug, lock=True)
            except Exception:
                pass


    # =========================================================================
    # SECTION 10: COPY WITH OFFSET FUNCTIONALITY
    # =========================================================================
    
    def select_all_channels(self, *_):
        """Select all translation and rotation channels."""
        cmds.checkBox(self.translate_x_chk, edit=True, value=True)
        cmds.checkBox(self.translate_y_chk, edit=True, value=True)
        cmds.checkBox(self.translate_z_chk, edit=True, value=True)
        cmds.checkBox(self.rotate_x_chk, edit=True, value=True)
        cmds.checkBox(self.rotate_y_chk, edit=True, value=True)
        cmds.checkBox(self.rotate_z_chk, edit=True, value=True)
    
    def deselect_all_channels(self, *_):
        """Deselect all translation and rotation channels."""
        cmds.checkBox(self.translate_x_chk, edit=True, value=False)
        cmds.checkBox(self.translate_y_chk, edit=True, value=False)
        cmds.checkBox(self.translate_z_chk, edit=True, value=False)
        cmds.checkBox(self.rotate_x_chk, edit=True, value=False)
        cmds.checkBox(self.rotate_y_chk, edit=True, value=False)
        cmds.checkBox(self.rotate_z_chk, edit=True, value=False)
    
    def get_selected_channels(self):
        """Get list of selected channels for copy operation."""
        channels = []
        if cmds.checkBox(self.translate_x_chk, query=True, value=True):
            channels.append('translateX')
        if cmds.checkBox(self.translate_y_chk, query=True, value=True):
            channels.append('translateY')
        if cmds.checkBox(self.translate_z_chk, query=True, value=True):
            channels.append('translateZ')
        if cmds.checkBox(self.rotate_x_chk, query=True, value=True):
            channels.append('rotateX')
        if cmds.checkBox(self.rotate_y_chk, query=True, value=True):
            channels.append('rotateY')
        if cmds.checkBox(self.rotate_z_chk, query=True, value=True):
            channels.append('rotateZ')
        return channels
    
       
    def copy_with_offset(self, *_):
        """Copy animation using per-object offset settings from the object list."""
        if not self.copy_offset_objects:
            cmds.warning("No objects in the Copy with Offset list. Please add objects first.")
            return
        
        if len(self.copy_offset_objects) < 2:
            cmds.warning("Need at least 2 objects in the list. First object is the source.")
            return
        
        source_ctrl = self.copy_offset_objects[0]
        copied_count = 0
        
        # Copy from source to each subsequent object with individual settings
        for i in range(1, len(self.copy_offset_objects)):
            target_ctrl = self.copy_offset_objects[i]
            time_offset = self.copy_offset_time_offsets[i] if i < len(self.copy_offset_time_offsets) else 10
            value_offset = self.copy_offset_value_offsets[i] if i < len(self.copy_offset_value_offsets) else 0.0
            channel_settings = self.copy_offset_channel_settings[i] if i < len(self.copy_offset_channel_settings) else {}
            
            # Get enabled channels for this object
            channels = self._get_enabled_channels_for_object(channel_settings)
            if not channels:
                print(f"Skipping {target_ctrl} - no channels enabled")
                continue
            
            # Copy with individual object settings
            success = self.copy_animation_with_offset(source_ctrl, target_ctrl, channels, 
                                                    time_offset, value_offset)
            if success:
                copied_count += 1
        
        if copied_count > 0:
            cmds.inViewMessage(amg=f"Copied animation from {source_ctrl} to {copied_count} objects with individual offsets", 
                              pos='midCenter', fade=True)
            print(f"ðŸŽ¯ Copy with Offset completed: {source_ctrl} â†’ {copied_count} objects")
        else:
            cmds.warning("No animation was copied. Check object names and channel settings.")

    def _get_enabled_channels_for_object(self, channel_settings):
        """Get list of enabled channels for a specific object."""
        channels = []
        channel_map = {
            'tx': 'translateX', 'ty': 'translateY', 'tz': 'translateZ',
            'rx': 'rotateX', 'ry': 'rotateY', 'rz': 'rotateZ'
        }
        
        for key, maya_channel in channel_map.items():
            if channel_settings.get(key, True):  # Default to True if not specified
                channels.append(maya_channel)
        
        return channels
    
    def copy_animation_with_offset(self, source_ctrl, target_ctrl, channels, time_offset, value_offset):
        """Copy animation from source to target with specified offsets."""
        if not (cmds.objExists(source_ctrl) and cmds.objExists(target_ctrl)):
            print(f"Controls not found: {source_ctrl} or {target_ctrl}")
            return False
        
        copied_channels = 0
        
        for channel in channels:
            source_attr = f"{source_ctrl}.{channel}"
            target_attr = f"{target_ctrl}.{channel}"
            
            # Skip if source doesn't have this attribute or it's not animated
            if not cmds.objExists(source_attr):
                continue
            
            source_curve = self._anim_curve_for_attr(source_attr)
            if not source_curve:
                continue
            
            # Skip if target doesn't have this attribute
            if not cmds.objExists(target_attr):
                continue
            
            # Get time range from source
            try:
                time_range = cmds.keyframe(source_curve, query=True, timeChange=True)
                if not time_range:
                    continue
                    
                start_t = min(time_range)
                end_t = max(time_range)
                
                # Copy keys from source
                cmds.copyKey(source_attr, time=(start_t, end_t), includeUpperBound=True)
                
                # Handle locked attributes
                relock = False
                try:
                    if cmds.getAttr(target_attr, lock=True):
                        relock = True
                        cmds.setAttr(target_attr, lock=False)
                except Exception:
                    pass
                
                # Paste with offsets
                try:
                    cmds.pasteKey(target_attr, option='replaceCompletely', 
                                timeOffset=time_offset, valueOffset=value_offset)
                except Exception as e:
                    # Fallback paste
                    try:
                        cmds.pasteKey(target_attr, option='replaceCompletely')
                        # Apply offsets manually if paste with offsets failed
                        if time_offset != 0:
                            cmds.keyframe(target_attr, edit=True, relative=True, timeChange=time_offset)
                        if value_offset != 0:
                            cmds.keyframe(target_attr, edit=True, relative=True, valueChange=value_offset)
                    except Exception as e2:
                        cmds.warning(f"Failed to paste keys to {target_attr}: {e2}")
                
                # Apply successful tangent smoothing and cycle infinity for Copy with Offset
                self._smooth_cycle_transitions(target_attr)
                self._apply_cycle_infinity(target_attr)
                
                # Restore lock state
                if relock:
                    try:
                        cmds.setAttr(target_attr, lock=True)
                    except Exception:
                        pass
                
                copied_channels += 1
                        
            except Exception as e:
                print(f"Error copying {source_attr} to {target_attr}: {e}")
        
        return copied_channels > 0

    # =========================================================================
    # SECTION 11: TANGENT SMOOTHING FOR CYCLE CONTINUITY
    # =========================================================================
    
    def _ensure_smooth_cycle_tangents(self, curves, start_time, end_time):
        """Ensure smooth tangent continuity at cycle boundaries for seamless looping."""
        if not curves:
            return
            
        # Normalize to list
        if isinstance(curves, str):
            curves = [curves]
            
        for curve in curves:
            if not curve or not cmds.objExists(curve):
                continue
                
            self._apply_smooth_cycle_tangents_to_curve(curve, start_time, end_time)
    
    def _apply_smooth_cycle_tangents_to_curve(self, curve, start_time, end_time):
        """Apply smooth cycle tangents to a single curve."""
        try:
            # Get all keyframe times on this curve
            key_times = cmds.keyframe(curve, query=True, timeChange=True) or []
            if len(key_times) < 2:
                return
                
            # Find start and end keys (closest to start_time and end_time)
            start_key = min(key_times, key=lambda t: abs(t - start_time))
            end_key = min(key_times, key=lambda t: abs(t - end_time))
            
            if start_key == end_key:
                return
            
            # Ensure values match for perfect cycling
            start_value = cmds.keyframe(curve, time=(start_key, start_key), query=True, valueChange=True)[0]
            end_value = cmds.keyframe(curve, time=(end_key, end_key), query=True, valueChange=True)[0]
            
            if abs(start_value - end_value) > 0.001:  # Small tolerance for floating point
                cmds.keyframe(curve, time=(end_key, end_key), valueChange=start_value)
                print(f"DEBUG: Matched end value to start value for {curve}")
            
            # Apply directional tangent smoothing for natural curve flow + cycle continuity
            self._apply_directional_cycle_tangents(curve, key_times, start_key, end_key)
                
        except Exception as e:
            print(f"DEBUG: Error applying smooth cycle tangents to {curve}: {e}")
    
    def _apply_directional_cycle_tangents(self, curve, key_times, start_key, end_key):
        """Apply tangents with smooth middle keys and inverted start/end for cycling."""
        try:
            # STEP 1: Apply smooth spline tangents to ALL keys first (natural curve flow)
            for key_time in key_times:
                cmds.keyTangent(curve, time=(key_time, key_time), 
                              inTangentType='spline', outTangentType='spline')
            
            print(f"DEBUG: Applied spline tangents to all {len(key_times)} keys")
            
            # STEP 2: Get the smoothed tangent angles from start and end keys
            start_out_angle = cmds.keyTangent(curve, time=(start_key, start_key), query=True, outAngle=True)[0]
            start_out_weight = cmds.keyTangent(curve, time=(start_key, start_key), query=True, outWeight=True)[0]
            
            end_in_angle = cmds.keyTangent(curve, time=(end_key, end_key), query=True, inAngle=True)[0]
            end_in_weight = cmds.keyTangent(curve, time=(end_key, end_key), query=True, inWeight=True)[0]
            
            # STEP 3: Make end key tangents exactly match start key tangents for perfect cycling
            # Get start key's final tangent information (after spline smoothing)
            start_in_angle = cmds.keyTangent(curve, time=(start_key, start_key), query=True, inAngle=True)[0]
            start_in_weight = cmds.keyTangent(curve, time=(start_key, start_key), query=True, inWeight=True)[0]
            start_out_angle = cmds.keyTangent(curve, time=(start_key, start_key), query=True, outAngle=True)[0]
            start_out_weight = cmds.keyTangent(curve, time=(start_key, start_key), query=True, outWeight=True)[0]
            
            # Apply EXACT same tangents to end key (perfect match)
            cmds.keyTangent(curve, time=(end_key, end_key), 
                          inAngle=start_in_angle, inWeight=start_in_weight,
                          outAngle=start_out_angle, outWeight=start_out_weight,
                          inTangentType='fixed', outTangentType='fixed')
            
            # Now make start key in-tangent match end key out-tangent for cycling continuity
            cmds.keyTangent(curve, time=(start_key, start_key), 
                          inAngle=start_out_angle, inWeight=start_out_weight,
                          inTangentType='fixed')
            
            print(f"DEBUG: Applied exact tangent matching:")
            print(f"  End key in/out: {start_in_angle:.1f}Â°/{start_out_angle:.1f}Â° (matches start key)")
            print(f"  Start key in: {start_out_angle:.1f}Â° (matches own out-tangent for cycling)")
            
        except Exception as e:
            print(f"DEBUG: Error in directional cycle tangents: {e}")
    

            
    def copy_with_direction(self, *_):
        """Copy animation from left controls to right controls (now individual pairs control direction)."""
        try:
            self.copy_left_to_right()
        except Exception as e:
            cmds.warning(f"Copy with direction failed: {e}")

# =========================================================================
# MAIN EXECUTION
# =========================================================================

def launch_cycle_maker():
    """Launch the Cycle Maker UI."""
    try:
        # Close existing window if it exists
        if cmds.window("CycleMakerWindow", exists=True):
            cmds.deleteUI("CycleMakerWindow", window=True)
        
        # Create and show the UI
        ui = CycleMakerUI()
        print("Cycle Maker UI launched successfully!")
        return ui
    except Exception as e:
        print(f"Error launching Cycle Maker UI: {e}")
        return None

# For direct execution in Maya
if __name__ == "__main__" or "maya" in globals():
    launch_cycle_maker()